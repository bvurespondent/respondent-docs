{
  "openapi": "3.0.0",
  "paths": {
    "/v1/industries": {
      "get": {
        "operationId": "IndustriesController_findAll",
        "summary": "Retrieve industry list",
        "description": "Get all industries",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": { "default": 1, "type": "number" }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "schema": { "default": 50, "type": "number" }
          },
          {
            "name": "includeCount",
            "required": false,
            "in": "query",
            "schema": { "default": false, "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndustriesPaginatedDto"
                }
              }
            }
          }
        },
        "tags": ["industries"]
      }
    },
    "/v1/job-titles": {
      "get": {
        "operationId": "JobTitlesController_search",
        "summary": "Retrieve job title list",
        "description": "Find all job titles paginated\n\nTo get all job titles, run `/v1/job-titles?pageSize=50000&page=1`",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": { "default": 1, "type": "number" }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "schema": { "default": 50, "type": "number" }
          },
          {
            "name": "includeCount",
            "required": false,
            "in": "query",
            "schema": { "default": false, "type": "boolean" }
          },
          {
            "name": "query",
            "required": false,
            "in": "query",
            "description": "Character Limit: min 3 and max 100",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleJobTitlesPaginatedDto"
                }
              }
            }
          }
        },
        "tags": ["job-titles"]
      }
    },
    "/v1/lookups": {
      "get": {
        "operationId": "LookupsController_findAll",
        "summary": "Retrieve lookup values",
        "description": "Lookup lists of values for dropdowns; intended to be cached\nand not used in front ends directly.\nUsing `?pick[]=country&contexts[]=project` will return a list of countries\nsupported by when creating a project.\n\n`contexts` can only be used with the `country` lookup alone.\n\n_note:_\n- `jobTitles` is a very large list and throws an error in Prod,\nplease use `/v1/job-titles` endpoint that is paginated\n- `industries`, `skills`, `topics` return a LOT of data and\ncan be very slow to return\n\n_note:_\n- The following lookups' codes will change per environment as they are based on ids:\n[`industries`, `jobTitles`, `skills`, `topics`]\n- the rest will remain the same across environments",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "pick",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/LookupGroup" }
            }
          },
          {
            "name": "contexts",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/Context" }
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "schema": { "$ref": "#/components/schemas/Language" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LookupsMinimalDto" }
              }
            }
          }
        },
        "tags": ["lookups"]
      }
    },
    "/v1/messaging/conversations/{conversationUid}/messages": {
      "post": {
        "operationId": "MessagesController_createMessage",
        "summary": "Create a message",
        "description": "Create a message in a conversation.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "conversationUid",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConversationMessageDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Message" }
              }
            }
          }
        },
        "tags": ["messaging"]
      }
    },
    "/v1/messaging/messages": {
      "get": {
        "operationId": "MessagesController_findAll",
        "summary": "Retrieve all messages",
        "description": "Get all messages for a user.\nWill return messages from both the researcher and the participant.\n\n`conversation.metadata.externalResearcherId` can be used to link the message to an external researcher.\n\n`conversation.metadata.projectId` can be used to link the message to a project.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": { "default": 1, "type": "number" }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "schema": { "default": 20, "type": "number" }
          },
          {
            "name": "includeCount",
            "required": false,
            "in": "query",
            "schema": { "default": false, "type": "boolean" }
          },
          {
            "name": "conversationUid",
            "required": false,
            "in": "query",
            "description": "Filter messages by conversationUid.",
            "schema": { "type": "string" }
          },
          {
            "name": "externalResearcherId",
            "required": false,
            "in": "query",
            "description": "Filter messages by externalResearcherId.",
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "required": false,
            "in": "query",
            "description": "Filter messages by projectId.",
            "schema": { "format": "ObjectId", "type": "string" }
          },
          {
            "name": "since",
            "required": false,
            "in": "query",
            "description": "Get all messages since timestamp.",
            "schema": { "type": "string" }
          },
          {
            "name": "until",
            "required": false,
            "in": "query",
            "description": "Get all messages until timestamp.",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessagesPaginatedDto"
                }
              }
            }
          }
        },
        "tags": ["messaging"]
      },
      "post": {
        "operationId": "MessagesController_create",
        "summary": "Use `POST /messaging/conversations/:conversationUid/messages`",
        "deprecated": true,
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateMessageDto" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Message" }
              }
            }
          }
        },
        "tags": ["messaging"]
      }
    },
    "/v1/messaging/messages/inbox": {
      "get": {
        "operationId": "MessagesController_getInbox",
        "summary": "Retrieve unread conversations",
        "description": "Get all conversations with unread messages.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "externalResearcherId",
            "required": false,
            "in": "query",
            "description": "Filter by external researcher id.",
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "required": false,
            "in": "query",
            "description": "Filter by projectId.",
            "schema": { "format": "ObjectId", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MessageInboxDto" }
              }
            }
          }
        },
        "tags": ["messaging"]
      }
    },
    "/v1/messaging/messages/{messageUid}": {
      "get": {
        "operationId": "MessagesController_findOne",
        "summary": "Retrieve specific message",
        "description": "Get a message by its UID.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "messageUid",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Message" }
              }
            }
          }
        },
        "tags": ["messaging"]
      }
    },
    "/v1/messaging/teams/{teamId}/messages/inbox": {
      "get": {
        "operationId": "MessagesController_getInboxDeprecated",
        "summary": "Use `GET /messaging/messages/inbox`",
        "deprecated": true,
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "externalResearcherId",
            "required": false,
            "in": "query",
            "description": "Filter by external researcher id.",
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "required": false,
            "in": "query",
            "description": "Filter by projectId.",
            "schema": { "format": "ObjectId", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MessageInboxDto" }
              }
            }
          }
        },
        "tags": ["messaging"]
      }
    },
    "/v1/messaging/conversations": {
      "post": {
        "operationId": "ConversationsController_create",
        "summary": "Create a conversation",
        "description": "Create a conversation.\nThis must be done before sending a message.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateConversationDto" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Conversation" }
              }
            }
          }
        },
        "tags": ["messaging"]
      },
      "get": {
        "operationId": "ConversationsController_findAll",
        "summary": "Retrieve all conversations",
        "description": "Get all conversations.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": { "default": 1, "type": "number" }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "schema": { "default": 20, "type": "number" }
          },
          {
            "name": "includeCount",
            "required": false,
            "in": "query",
            "schema": { "default": false, "type": "boolean" }
          },
          {
            "name": "externalResearcherId",
            "required": false,
            "in": "query",
            "description": "Filter conversations by externalResearcherId.",
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "required": false,
            "in": "query",
            "description": "Filter conversations by projectId.",
            "schema": { "format": "ObjectId", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationsPaginatedDto"
                }
              }
            }
          }
        },
        "tags": ["messaging"]
      }
    },
    "/v1/messaging/conversations/{conversationUid}": {
      "get": {
        "operationId": "ConversationsController_findOne",
        "summary": "Retrieve specific conversation",
        "description": "Get a conversation by its UID.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "conversationUid",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Conversation" }
              }
            }
          }
        },
        "tags": ["messaging"]
      },
      "patch": {
        "operationId": "ConversationsController_update",
        "summary": "Update a conversation",
        "description": "Update a conversation by its UID.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "conversationUid",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateConversationDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Conversation" }
              }
            }
          }
        },
        "tags": ["messaging"]
      }
    },
    "/v1/messaging/conversations/{conversationUid}/read": {
      "patch": {
        "operationId": "ConversationsController_markAsRead",
        "summary": "Mark conversation as read",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "conversationUid",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": { "schema": { "type": "boolean" } }
            }
          }
        },
        "tags": ["messaging"]
      }
    },
    "/v1/messaging/conversations/{conversationUid}/participants": {
      "post": {
        "operationId": "ConversationsController_addParticipant",
        "summary": "Add participant to conversation",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "conversationUid",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AddParticipantDto" }
            }
          }
        },
        "responses": { "201": { "description": "" } },
        "tags": ["messaging"]
      }
    },
    "/v1/messaging/conversations/{conversationUid}/participants/{participantUserId}": {
      "delete": {
        "operationId": "ConversationsController_removeParticipant",
        "summary": "Remove participant from conversation",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "conversationUid",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "participantUserId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": { "schema": { "type": "boolean" } }
            }
          }
        },
        "tags": ["messaging"]
      },
      "post": {
        "operationId": "ConversationsController_addParticipant_deprecated",
        "summary": "",
        "deprecated": true,
        "description": "Use `POST /messaging/conversations/:conversationUid/participants`.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "conversationUid",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "participantUserId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": { "schema": { "type": "boolean" } }
            }
          }
        },
        "tags": ["messaging"]
      }
    },
    "/v1/profiles": {
      "post": {
        "operationId": "ProfilesController_create",
        "summary": "Create test participant (Staging only)",
        "description": "Creates a respondent profile associated to your organizationId.\nAuto verified email and work email.\nTo be used for testing in staging only.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateProfileDto" }
            }
          }
        },
        "responses": { "201": { "description": "" } },
        "tags": ["profiles"]
      }
    },
    "/v1/profiles/{profileId}": {
      "get": {
        "operationId": "ProfilesController_findOne",
        "summary": "Retrieve participant profile",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "profileId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Profile" }
              }
            }
          }
        },
        "tags": ["profiles"]
      }
    },
    "/v1/projects/{projectId}": {
      "get": {
        "operationId": "ProjectsController_getById",
        "summary": "Retrieve a specific project",
        "description": "Returns a Project by ID",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Project" }
              }
            }
          }
        },
        "tags": ["projects"]
      },
      "patch": {
        "operationId": "ProjectsController_update",
        "summary": "Update a project",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  { "$ref": "#/components/schemas/UpdateDraftB2cProjectDto" },
                  { "$ref": "#/components/schemas/UpdateDraftB2bProjectDto" },
                  { "$ref": "#/components/schemas/UpdatePublishedProjectDto" }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Project" }
              }
            }
          }
        },
        "tags": ["projects"]
      },
      "delete": {
        "operationId": "ProjectsController_delete",
        "summary": "Delete a project",
        "description": "Only projects in the status of draft can be deleted.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["projects"]
      }
    },
    "/v1/teams/{teamId}/projects": {
      "get": {
        "operationId": "ProjectsController_getByTeamId",
        "summary": "Use /projects instead",
        "deprecated": true,
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Specifies which page of results to return",
            "schema": { "default": 1, "type": "number" }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Number of records to return per page",
            "schema": { "default": 50, "type": "number" }
          },
          {
            "name": "includeCount",
            "required": false,
            "in": "query",
            "description": "If true, includes the total count of records",
            "schema": { "default": false, "type": "boolean" }
          },
          {
            "name": "externalResearcherId",
            "required": false,
            "in": "query",
            "description": "External identifier for the researcher who created project on your system",
            "schema": { "type": "string" }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Current state of the project. See more details on [Project Statuses](https://developers.respondent.io/docs/project-statuses).",
            "schema": { "$ref": "#/components/schemas/ProjectStatus" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicProjectsPaginatedDto"
                }
              }
            }
          }
        },
        "tags": ["projects"]
      }
    },
    "/v1/projects": {
      "get": {
        "operationId": "ProjectsController_findAll",
        "summary": "Retrieve all projects",
        "description": "Returns All Projects. Closed projects are not returned by default. To get a list of closed projects only, set status = CLOSED.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Specifies which page of results to return",
            "schema": { "default": 1, "type": "number" }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Number of records to return per page",
            "schema": { "default": 50, "type": "number" }
          },
          {
            "name": "includeCount",
            "required": false,
            "in": "query",
            "description": "If true, includes the total count of records",
            "schema": { "default": false, "type": "boolean" }
          },
          {
            "name": "externalResearcherId",
            "required": false,
            "in": "query",
            "description": "External identifier for the researcher who created project on your system",
            "schema": { "type": "string" }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Current state of the project. See more details on [Project Statuses](https://developers.respondent.io/docs/project-statuses).",
            "schema": { "$ref": "#/components/schemas/ProjectStatus" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicProjectsPaginatedDto"
                }
              }
            }
          }
        },
        "tags": ["projects"]
      },
      "post": {
        "operationId": "ProjectsController_create",
        "summary": "Create a project",
        "description": "Creates a Project.\nDocumentation: https://developers.respondent.io/docs/project-creation-json",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  { "$ref": "#/components/schemas/CreateB2bProjectDto" },
                  { "$ref": "#/components/schemas/CreateB2cProjectDto" }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Project" }
              }
            }
          }
        },
        "tags": ["projects"]
      }
    },
    "/v1/projects/{projectId}/copy": {
      "post": {
        "operationId": "ProjectsController_copy",
        "summary": "Copy a project",
        "description": "Copy a Project",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Project" }
              }
            }
          }
        },
        "tags": ["projects"]
      }
    },
    "/v1/projects/{projectId}/files/form-data": {
      "put": {
        "operationId": "ProjectsController_uploadFilesFormData",
        "summary": "Upload NDA file",
        "description": "The project must be in draft status to use this endpoint.\n     Currently, only files of type nda are supported.\n     Accepted file formats: PDF and DOCX.\nMust include `Content-Length` and `Content-Type` headers.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "type",
            "required": true,
            "in": "query",
            "schema": {
              "enum": ["nda", "picture", "attachment"],
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "Content-Length",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "uploadFile": { "type": "string", "format": "binary" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": { "schema": { "type": "object" } }
            }
          }
        },
        "tags": ["projects"]
      }
    },
    "/v1/projects/{projectId}/publish": {
      "patch": {
        "operationId": "ProjectsController_publish",
        "summary": "Publish a project",
        "description": "Publishes a Project",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Project" }
              }
            }
          }
        },
        "tags": ["projects"]
      }
    },
    "/v1/projects/{projectId}/pause": {
      "patch": {
        "operationId": "ProjectsController_pause",
        "summary": "Pause a project",
        "description": "Pause / Unpause recruitment for a project",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PauseProjectDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Project" }
              }
            }
          }
        },
        "tags": ["projects"]
      }
    },
    "/v1/projects/{projectId}/close": {
      "patch": {
        "operationId": "ProjectsController_close",
        "summary": "Close a project",
        "description": "Once a project is closed you can't contact participants, or change any\nparticipants' status.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CloseProjectDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Project" }
              }
            }
          }
        },
        "tags": ["projects"]
      }
    },
    "/v1/projects/{projectId}/feasibility/audience-size-estimate": {
      "get": {
        "operationId": "ProjectsController_projectAudienceSizeEstimate",
        "summary": "Retrieve audience size estimate",
        "description": "Get estimate of audience size for a project.\nOnly available for projects in the status of draft.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AudienceSizeEstimate"
                }
              }
            }
          }
        },
        "tags": ["projects"]
      }
    },
    "/v1/projects/{projectId}/screener-questions": {
      "post": {
        "operationId": "ScreenerQuestionsController_create",
        "summary": "Create a screener question",
        "description": "Only accepts one question at a time. Use /bulk for multiple questions.\n CHECKBOX: {\n        id: 3,\n        answerValues: [\n          { id: 1, text: 'May Select' },\n          { id: 2, text: 'Must Select' },\n          { id: 3, text: 'Disqualify' },\n        ],\n      },\n       RADIO: {\n        id: 1,\n        answerValues: [\n          { id: 1, text: 'Qualify' },\n          { id: 2, text: 'Disqualify' },\n        ],\n      },",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CreateRadioScreenerQuestionDto"
                  },
                  {
                    "$ref": "#/components/schemas/CreateCheckboxScreenerQuestionDto"
                  },
                  {
                    "$ref": "#/components/schemas/CreateTextboxScreenerQuestionDto"
                  },
                  {
                    "$ref": "#/components/schemas/CreateSliderScaleScreenerQuestionDto"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ScreenerQuestion" }
              }
            }
          }
        },
        "tags": ["screener-questions"]
      },
      "get": {
        "operationId": "ScreenerQuestionsController_findAll",
        "summary": "Retrieve screener questions",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ScreenerQuestion" }
                }
              }
            }
          }
        },
        "tags": ["screener-questions"]
      }
    },
    "/v1/projects/{projectId}/screener-questions/bulk": {
      "put": {
        "operationId": "ScreenerQuestionsController_bulkCreate",
        "summary": "Create multiple screener questions",
        "description": "This endpoint will replace all screener questions with the list in the body.\n\nUid is optional. If not provided, a new uid will be generated for the question.\n\nRadio Question skip logic: `goToQuestionUid` is required.\n\nCheckbox Question skip logic: `answerUid` of the checkbox question and `goToQuestionUid` of question to navigate to are required.\n\nTo use bulk screener endpoint, send the list of questions in the body:\n\nOption 1: Send bulk questions including uids and skip logic (see skip logic requirements above) from your end. We will process and return the response with the uids.\n\nOption 2: This option has 2 steps:\n\n   2.1 PUT request: Create bulk questions without skip logic.\n\n   2.2 PUT request: Use the generated uids from the above response to update the skip logic for bulk questions. Please ensure you refer the same uids generated in the response.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/UpsertRadioScreenerQuestionDto"
                    },
                    {
                      "$ref": "#/components/schemas/UpsertCheckboxScreenerQuestionDto"
                    },
                    {
                      "$ref": "#/components/schemas/UpsertTextboxScreenerQuestionDto"
                    },
                    {
                      "$ref": "#/components/schemas/UpsertSliderScaleScreenerQuestionDto"
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ScreenerQuestion" }
                }
              }
            }
          }
        },
        "tags": ["screener-questions"]
      }
    },
    "/v1/projects/{projectId}/screener-questions/{screenerQuestionId}": {
      "get": {
        "operationId": "ScreenerQuestionsController_getById",
        "summary": "Retrieve specific screener question",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "screenerQuestionId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ScreenerQuestion" }
              }
            }
          }
        },
        "tags": ["screener-questions"]
      },
      "delete": {
        "operationId": "ScreenerQuestionsController_delete",
        "summary": "Delete screener question",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "screenerQuestionId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ScreenerQuestion" }
              }
            }
          }
        },
        "tags": ["screener-questions"]
      },
      "patch": {
        "operationId": "ScreenerQuestionsController_update",
        "summary": "Update screener question",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "screenerQuestionId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/UpdateRadioScreenerQuestionDto"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateCheckboxScreenerQuestionDto"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateTextboxScreenerQuestionDto"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateSliderScaleScreenerQuestionDto"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ScreenerQuestion" }
              }
            }
          }
        },
        "tags": ["screener-questions"]
      }
    },
    "/v1/projects/{projectId}/screener-questions/order": {
      "patch": {
        "operationId": "ScreenerQuestionsController_order",
        "summary": "Reorder screener questions",
        "description": "Input body: Array of Screener Question IDs\nThis endpoint orders the screener question based on the sequence of Screener Question IDs in the Array.\nSending end question ID is optional. If not sent, the question will be moved to the end of the list.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "type": "array", "items": { "type": "string" } }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ScreenerQuestion" }
                }
              }
            }
          }
        },
        "tags": ["screener-questions"]
      }
    },
    "/v1/projects/{projectId}/screener-responses": {
      "get": {
        "operationId": "ScreenerResponsesController_findAll",
        "summary": "List screener responses",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Specifies which page of results to return",
            "schema": { "default": 1, "type": "number" }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Number of records to return per page",
            "schema": { "default": 50, "type": "number" }
          },
          {
            "name": "includeCount",
            "required": false,
            "in": "query",
            "description": "If true, includes the total count of records",
            "schema": { "default": false, "type": "boolean" }
          },
          {
            "name": "hidden",
            "required": false,
            "in": "query",
            "schema": { "default": false, "type": "boolean" }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "schema": { "$ref": "#/components/schemas/ScreenerResponseStatus" }
          },
          {
            "name": "statuses",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/ScreenerResponseStatus" }
            }
          },
          {
            "name": "qualified",
            "required": false,
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "name": "favorite",
            "required": false,
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "name": "visibilityStatus",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ScreenerResponseVisibilityStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScreenerResponsesPaginatedDto"
                }
              }
            }
          }
        },
        "tags": ["screener-responses"]
      }
    },
    "/v1/projects/{projectId}/screener-responses/payouts": {
      "get": {
        "operationId": "ScreenerResponsesController_getPayouts",
        "summary": "Retrieve payout counts",
        "description": "Returns the payout counts for participants which have been paid for a project.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParticipantPayoutSummaryDto"
                  }
                }
              }
            }
          }
        },
        "tags": ["screener-responses"]
      }
    },
    "/v1/projects/{projectId}/screener-responses/{screenerResponseId}": {
      "get": {
        "operationId": "ScreenerResponsesController_findOne",
        "summary": "View a specific response",
        "description": "Get Screener Response by Id.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "screenerResponseId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ScreenerResponse" }
              }
            }
          }
        },
        "tags": ["screener-responses"]
      }
    },
    "/v1/projects/{projectId}/screener-responses/{screenerResponseId}/invite": {
      "patch": {
        "operationId": "ScreenerResponsesController_invite",
        "summary": "Invite participant",
        "description": "Invite Participant to your Project.\nInvitations cannot be undone. They include your name, project name, and session link (for remote interviews).\nEmail reminders are sent 5 days, 1 day, and 4 hours prior to booked time.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "screenerResponseId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InviteScreenerResponseDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ScreenerResponse" }
              }
            }
          }
        },
        "tags": ["screener-responses"]
      }
    },
    "/v1/projects/{projectId}/screener-responses/{screenerResponseId}/schedule": {
      "patch": {
        "operationId": "ScreenerResponsesController_schedule",
        "summary": "Schedule participant",
        "description": "Set the scheduled time and timezone after booking a time with a participant.\nThis will be displayed to the participant.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "screenerResponseId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleExternalScreenerResponseDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ScreenerResponse" }
              }
            }
          }
        },
        "tags": ["screener-responses"]
      }
    },
    "/v1/projects/{projectId}/screener-responses/{screenerResponseId}/attended": {
      "patch": {
        "operationId": "ScreenerResponsesController_markAtteneded",
        "summary": "Mark as attended",
        "description": "Mark Participant as Attended.\nThis will trigger the payment process for the Participant.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "screenerResponseId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ScreenerResponse" }
              }
            }
          }
        },
        "tags": ["screener-responses"]
      }
    },
    "/v1/projects/{projectId}/screener-responses/{screenerResponseId}/report": {
      "patch": {
        "operationId": "ScreenerResponsesController_report",
        "summary": "Report participant",
        "description": "Anonymously report a participant for misrepresenting themselves or providing false information.\nThis participant will not appear in future projects with your team or organization,\nand their account may be subject to disciplinary action by Respondent, which may include suspension or permanent account removal.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "screenerResponseId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportScreenerResponseDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ScreenerResponse" }
              }
            }
          }
        },
        "tags": ["screener-responses"]
      }
    },
    "/v1/projects/{projectId}/screener-responses/{screenerResponseId}/favorite": {
      "patch": {
        "operationId": "ScreenerResponsesController_favorite",
        "summary": "Mark as favorite",
        "description": "Favorite Participant:\nUse this functionality to save this participant for later. Use the filter to easily retrieve them.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "screenerResponseId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FavoriteScreenerResponseDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ScreenerResponse" }
              }
            }
          }
        },
        "tags": ["screener-responses"]
      }
    },
    "/v1/projects/{projectId}/screener-responses/{screenerResponseId}/qualify": {
      "patch": {
        "operationId": "ScreenerResponsesController_qualify",
        "summary": "Qualify participant",
        "description": "Disqualification Reasons only accepts array of Code/s:\n   code: \"MISREPRESENTED\", text: \"False or misleading information provided by Participant\"\n   code: \"CONTEXT\", text: \"Not enough information about participant\"\n   code: \"SCREENER\", text: \"Answers to screener questions not a match\"\n   code: \"OTHER\", text: \"Other\"",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "screenerResponseId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QualifyScreenerResponseDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ScreenerResponse" }
              }
            }
          }
        },
        "tags": ["screener-responses"]
      }
    },
    "/v1/projects/{projectId}/screener-responses/{screenerResponseId}/hide": {
      "patch": {
        "operationId": "ScreenerResponsesController_hide",
        "summary": "Hide participant",
        "description": "Flag to hide/unhide a screener response to filter out participant from your results.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "screenerResponseId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HideScreenerResponseDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ScreenerResponse" }
              }
            }
          }
        },
        "tags": ["screener-responses"]
      }
    },
    "/v1/projects/{projectId}/screener-responses/{screenerResponseId}/no-show": {
      "patch": {
        "operationId": "ScreenerResponsesController_markNoShow",
        "summary": "Mark as no-show",
        "description": "Mark Respondent As No Show: You can mark a respondent as No-Show 15 minutes after the scheduled interview time.\nPlease make sure you have communicated with the respondent before marking him/her as 'No Show' as we send an email to let them know. This can not be undone.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "screenerResponseId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ScreenerResponse" }
              }
            }
          }
        },
        "tags": ["screener-responses"]
      }
    },
    "/v1/projects/{projectId}/screener-responses/{screenerResponseId}/reject": {
      "patch": {
        "operationId": "ScreenerResponsesController_reject",
        "summary": "Mark as rejected",
        "description": "Mark Respondent As Rejected: You can rejects a participant for quality reasons after meeting with the participant in their scheduled meeting.\nOnly for qualitative projects.\nParticipant will not be paid.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "screenerResponseId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ScreenerResponse" }
              }
            }
          }
        },
        "tags": ["screener-responses"]
      }
    },
    "/v1/projects/{projectId}/screener-responses/{screenerResponseId}/cancel-invite": {
      "patch": {
        "operationId": "ScreenerResponsesController_canceInvite",
        "summary": "Cancel invite",
        "description": "Cancel Invite: This cancel invite functionality is only available for participants who have not yet booked a time.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "screenerResponseId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ScreenerResponse" }
              }
            }
          }
        },
        "tags": ["screener-responses"]
      }
    },
    "/v1/projects/{projectId}/screener-responses/{screenerResponseId}/cancel-booking": {
      "patch": {
        "operationId": "ScreenerResponsesController_cancelBooking",
        "summary": "Cancel booking",
        "description": "Any cancellations within 4 hours prior to a scheduled booking or after the booking time has passed will result in the participant being marked as attended.\nResearcher will be charged the full incentive and service fee in this case.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "screenerResponseId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ScreenerResponse" }
              }
            }
          }
        },
        "tags": ["screener-responses"]
      }
    },
    "/v1/projects/{projectId}/screener-responses/{screenerResponseId}/cancel-booking-reinvite": {
      "patch": {
        "operationId": "ScreenerResponsesController_cancelBookingReinvite",
        "summary": "Cancel booking & re-invite",
        "description": "Bookings cannot be rescheduled less than 4 hours for interviews before by the Researcher",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "screenerResponseId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelBookingReinviteDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ScreenerResponse" }
              }
            }
          }
        },
        "tags": ["screener-responses"]
      }
    },
    "/v1/projects/{projectId}/screener-responses/{screenerResponseId}/participant-cancel-booking": {
      "patch": {
        "operationId": "ScreenerResponsesController_participantCancelBookingExternal",
        "summary": "Cancel booking (participant request)",
        "description": "This method is used when a public api partner is cancelling a booking on behalf of their participant.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "screenerResponseId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ParticipantCancelBookingDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ScreenerResponse" }
              }
            }
          }
        },
        "tags": ["screener-responses"]
      }
    },
    "/v1/projects/{projectId}/screener-responses/{screenerResponseId}/payouts": {
      "post": {
        "operationId": "ScreenerResponsesController_payoutParticipant",
        "summary": "Trigger manual payout",
        "description": "Used to payout a participant multiple times.\nMust pass payoutCount to ensure the intended number of payouts occur.\nWill pay them the same incentive amount again based on the project.\nUse `GET /projects/:projectId/payouts` to get the payout counts per participant for a project.\n\nProjects Autopay(true):\nThe first time participants are paid automatically when they are marked as attended.\n\nProjects Autopay(false):\nThe first time payment should be done by using the `POST /projects/:projectId/screener-responses/:screenerResponseId/payouts` endpoint.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "screenerResponseId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PayoutParticipantDto" }
            }
          }
        },
        "responses": { "201": { "description": "" } },
        "tags": ["screener-responses"]
      }
    },
    "/v1/skills": {
      "get": {
        "operationId": "SkillsController_search",
        "summary": "Retrieve skill list",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": { "default": 1, "type": "number" }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "schema": { "default": 50, "type": "number" }
          },
          {
            "name": "includeCount",
            "required": false,
            "in": "query",
            "schema": { "default": false, "type": "boolean" }
          },
          {
            "name": "query",
            "required": false,
            "in": "query",
            "description": "Character Limit: min 3 and max 100",
            "schema": { "type": "string" }
          },
          {
            "name": "validated",
            "required": false,
            "in": "query",
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SkillsPaginatedDto" }
              }
            }
          }
        },
        "tags": ["skills"]
      }
    },
    "/v1/topics": {
      "get": {
        "operationId": "TopicsController_search",
        "summary": "Retrieve topics list",
        "description": "These topics are not available in production:\n  • Internet & Telecom\n  • Online Communities\n  • Hobbies & Leisure\n  • Jobs & Education\n  • Reference\n  • Business & Industrial\n  • People & Society\n  • News",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": { "default": 1, "type": "number" }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "schema": { "default": 50, "type": "number" }
          },
          {
            "name": "includeCount",
            "required": false,
            "in": "query",
            "schema": { "default": false, "type": "boolean" }
          },
          {
            "name": "query",
            "required": false,
            "in": "query",
            "description": "Character Limit: min 3 and max 100",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TopicsPaginatedDto" }
              }
            }
          }
        },
        "tags": ["topics"]
      }
    },
    "/v1/pricing/balances/summary": {
      "get": {
        "operationId": "PricingController_getBalanceSummary",
        "summary": "View credit and incentive balance",
        "description": "Returns the credit and incentive balances for the team.\nIncentives are represented in cents in US dollars.\nCredits are represented in a total count of credits.\nTo get # of B2C credits divide by 30.\nTo get # of B2B credits divide by 50.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricingBalanceSummary"
                }
              }
            }
          }
        },
        "tags": ["pricing"]
      }
    },
    "/v1/team-respondents/profiles/{profileId}": {
      "get": {
        "operationId": "TeamRespondentsController_findOne",
        "summary": "Retrieve past participant profile",
        "description": "Find a past participant by profile Id\nRequires organization feature: participant database.",
        "parameters": [
          {
            "name": "profileId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TeamRespondent" }
              }
            }
          }
        },
        "tags": ["team-respondents"]
      }
    },
    "/v1/team-respondents": {
      "get": {
        "operationId": "TeamRespondentsController_findAll",
        "summary": "Search past participants",
        "description": "Search all past participants.\nRequires organization feature: participant database.",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Specifies which page of results to return",
            "schema": { "default": 1, "type": "number" }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Number of records to return per page",
            "schema": { "default": 50, "type": "number" }
          },
          {
            "name": "includeCount",
            "required": false,
            "in": "query",
            "description": "If true, includes the total count of records",
            "schema": { "default": false, "type": "boolean" }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "jobTitle",
            "required": false,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "lastPaidAt",
            "required": false,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "projectIds",
            "required": false,
            "in": "query",
            "schema": {
              "format": "ObjectId",
              "type": "array",
              "items": { "type": "string" }
            }
          },
          {
            "name": "source",
            "required": false,
            "in": "query",
            "schema": { "$ref": "#/components/schemas/ParticipantSource" }
          },
          {
            "name": "externalResearcherId",
            "required": false,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "externalTeamId",
            "required": false,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "externalCompanyId",
            "required": false,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "schema": { "$ref": "#/components/schemas/SortBy" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamRespondentsPaginatedDto"
                }
              }
            }
          }
        },
        "tags": ["team-respondents"]
      }
    },
    "/v1/team-respondents/batch-invite": {
      "put": {
        "operationId": "TeamRespondentsController_batchInvite",
        "summary": "Invite multiple past participants",
        "description": "Send project link invitation to multiple team respondents to allow them to sign up for your project.\nCan allow respondent to skip the screener questions.\nRequires organization feature: participant database.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchInviteTeamRespondentsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchInviteTeamRespondentsResponseDto"
                }
              }
            }
          }
        },
        "tags": ["team-respondents"]
      }
    },
    "/v1/webhooks": {
      "post": {
        "operationId": "WebhooksController_create",
        "summary": "Create webhook",
        "description": "An organization can have a single webhook url setup which we will send all events to.\nTo change the url of the webhook send another post request with the new url.\nThis will deactivate the previous webhook and create a new one.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateWebhookDto" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WebhookDto" }
              }
            }
          }
        },
        "tags": ["webhooks"]
      },
      "get": {
        "operationId": "WebhooksController_find",
        "summary": "Retrieve webhook",
        "description": "Get webhook for an organization.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WebhookDto" }
              }
            }
          }
        },
        "tags": ["webhooks"]
      }
    },
    "/v1/webhooks/{webhookId}": {
      "get": {
        "operationId": "WebhooksController_findOne",
        "summary": "Retrieve specific webhook",
        "description": "Get a webhook by id",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "webhookId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WebhookDto" }
              }
            }
          }
        },
        "tags": ["webhooks"]
      },
      "delete": {
        "operationId": "WebhooksController_deactivate",
        "summary": "Deactivate webhook",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "webhookId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["webhooks"]
      }
    },
    "/v1/webhooks/{webhookId}/event-types": {
      "get": {
        "operationId": "WebhooksController_findEventTypes",
        "summary": "Retrieve webhook event types",
        "description": "Get all event types that can be sent to a webhook.\n\n`PROJECTS.UPDATED`: All Recruting Status Changes.\n\n`SCREENER_RESPONSES.CREATED`: Screener Responses Created in `PENDING` state\n\n`SCREENER_RESPONSES.UPDATED`: Screener Response status updates. Statuses included: `PAID`, `CANCELLED`.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "webhookId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookEventTypesDto"
                }
              }
            }
          }
        },
        "tags": ["webhooks"]
      }
    },
    "/v1/webhooks/{webhookId}/simulate": {
      "post": {
        "operationId": "WebhooksController_simulate",
        "summary": "Simulate webhook event",
        "description": "Making a request to this endpoint will trigger a test webhook for the specified event.\nThis can be very useful when testing the setup that processes webhooks on your end.\nWill use random resource ids for the event.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "webhookId",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SimulateWebhookDto" }
            }
          }
        },
        "responses": { "201": { "description": "" } },
        "tags": ["webhooks"]
      }
    }
  },
  "info": {
    "title": "Partner API",
    "description": "Public API for partner integrations",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [{ "url": "https://api-staging.respondent.io" }],
  "components": {
    "schemas": {
      "Industry": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "ObjectId" },
          "createdAt": { "format": "date-time", "type": "string" },
          "name": { "type": "string" },
          "updatedAt": { "format": "date-time", "type": "string" }
        },
        "required": ["id", "createdAt", "name"]
      },
      "IndustriesPaginatedDto": {
        "type": "object",
        "properties": {
          "totalResults": {
            "type": "number",
            "description": "The total number of results possible, which is only provided in the response when `includeCount` is passed as `true` within a request."
          },
          "page": { "type": "number", "default": 1 },
          "pageSize": { "type": "number", "default": 50 },
          "results": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Industry" }
          }
        },
        "required": ["page", "pageSize", "results"]
      },
      "SimpleJobTitle": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "ObjectId" },
          "name": { "type": "string" }
        },
        "required": ["id", "name"]
      },
      "SimpleJobTitlesPaginatedDto": {
        "type": "object",
        "properties": {
          "totalResults": {
            "type": "number",
            "description": "The total number of results possible, which is only provided in the response when `includeCount` is passed as `true` within a request."
          },
          "page": { "type": "number", "default": 1 },
          "pageSize": { "type": "number", "default": 50 },
          "results": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SimpleJobTitle" }
          }
        },
        "required": ["page", "pageSize", "results"]
      },
      "LookupGroup": {
        "type": "string",
        "enum": [
          "marketType",
          "researchMethodology",
          "typeOfResearch",
          "ageGroup",
          "companySize",
          "country",
          "educationLevel",
          "employmentStatus",
          "ethnicity",
          "gender",
          "householdIncome",
          "industries",
          "jobFunction",
          "jobTitles",
          "keyQualifier",
          "seniorityLevel",
          "skills",
          "topics"
        ]
      },
      "Context": { "type": "string", "enum": ["project", "profile"] },
      "Language": { "type": "string", "default": "en", "enum": ["en"] },
      "GetLookupsDto": {
        "type": "object",
        "properties": {
          "pick": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LookupGroup" }
          },
          "contexts": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Context" }
          },
          "lang": { "$ref": "#/components/schemas/Language" }
        },
        "required": ["pick"]
      },
      "LookupMinimalDto": {
        "type": "object",
        "properties": {
          "code": { "type": "string" },
          "value": { "type": "string" },
          "weight": { "type": "number" },
          "disabled": { "type": "boolean" }
        },
        "required": ["code", "value"]
      },
      "LookupsMinimalDto": {
        "type": "object",
        "properties": {
          "ageGroup": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LookupMinimalDto" }
          },
          "companySize": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LookupMinimalDto" }
          },
          "country": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LookupMinimalDto" }
          },
          "educationLevel": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LookupMinimalDto" }
          },
          "employmentStatus": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LookupMinimalDto" }
          },
          "ethnicity": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LookupMinimalDto" }
          },
          "gender": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LookupMinimalDto" }
          },
          "householdIncome": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LookupMinimalDto" }
          },
          "industries": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LookupMinimalDto" }
          },
          "jobTitles": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LookupMinimalDto" }
          },
          "skills": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LookupMinimalDto" }
          },
          "topics": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LookupMinimalDto" }
          },
          "seniorityLevel": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LookupMinimalDto" }
          },
          "jobFunction": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LookupMinimalDto" }
          },
          "income": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LookupMinimalDto" }
          },
          "programmingLanguage": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LookupMinimalDto" }
          },
          "browser": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LookupMinimalDto" }
          },
          "smartphoneOS": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LookupMinimalDto" }
          },
          "tabletOS": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LookupMinimalDto" }
          },
          "computerOS": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LookupMinimalDto" }
          },
          "relationshipStatus": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LookupMinimalDto" }
          },
          "language": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LookupMinimalDto" }
          },
          "livingSituation": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LookupMinimalDto" }
          },
          "pet": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LookupMinimalDto" }
          },
          "keyQualifier": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LookupMinimalDto" }
          },
          "screenerResponseStatus": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LookupMinimalDto" }
          },
          "typeOfResearch": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LookupMinimalDto" }
          },
          "marketType": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LookupMinimalDto" }
          },
          "researchMethodology": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/LookupMinimalDto" }
          }
        }
      },
      "GetMessagesPaginatedDto": {
        "type": "object",
        "properties": {
          "page": { "type": "number", "default": 1 },
          "pageSize": { "type": "number", "default": 20 },
          "includeCount": { "type": "boolean", "default": false },
          "conversationUid": {
            "type": "string",
            "description": "Filter messages by conversationUid."
          },
          "externalResearcherId": {
            "type": "string",
            "description": "Filter messages by externalResearcherId."
          },
          "projectId": {
            "type": "string",
            "description": "Filter messages by projectId.",
            "format": "ObjectId"
          },
          "since": {
            "type": "string",
            "description": "Get all messages since timestamp."
          },
          "until": {
            "type": "string",
            "description": "Get all messages until timestamp."
          }
        }
      },
      "GetMessageInboxDto": {
        "type": "object",
        "properties": {
          "externalResearcherId": {
            "type": "string",
            "description": "Filter by external researcher id."
          },
          "projectId": {
            "type": "string",
            "description": "Filter by projectId.",
            "format": "ObjectId"
          }
        }
      },
      "CreateConversationMessageDto": {
        "type": "object",
        "properties": {
          "body": { "type": "string", "description": "Body of message." }
        },
        "required": ["body"]
      },
      "ConversationMetadata": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "description": "ProjectId of the project the coversation belongs to.",
            "format": "ObjectId"
          },
          "surveyResponseId": {
            "type": "string",
            "description": "ScreenerResponseId for the project, if exists.",
            "format": "ObjectId"
          },
          "externalResearcherId": {
            "type": "string",
            "description": "ExternalResearcherId for the project, if exists."
          },
          "externalTeamId": {
            "type": "string",
            "description": "ExternalTeamId for the project, if exists."
          },
          "externalCompanyId": {
            "type": "string",
            "description": "ExternalCompanyId for the project, if exists."
          }
        }
      },
      "ConversationParticipant": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "description": "Unique identifier for messaging user."
          },
          "foreignId": {
            "type": "string",
            "description": "UserId of messaging user."
          },
          "firstName": {
            "type": "string",
            "description": "First name of user."
          },
          "lastName": {
            "type": "string",
            "description": "Last name initial of user."
          },
          "read": {
            "type": "boolean",
            "description": "Whether the participant has read the conversation."
          },
          "deleted": {
            "type": "boolean",
            "description": "Whether the participant has muted the conversation."
          }
        },
        "required": ["uid", "firstName", "lastName", "read", "deleted"]
      },
      "MinimalConversation": {
        "type": "object",
        "properties": {
          "createdAt": { "type": "string" },
          "updatedAt": { "type": "string" },
          "uid": {
            "type": "string",
            "description": "Unique identifier of conversation."
          },
          "name": { "type": "string", "description": "Name of conversation." },
          "deleted": {
            "type": "boolean",
            "description": "If conversation is marked as deleted."
          },
          "locked": {
            "type": "boolean",
            "description": "If conversation is locked."
          },
          "read": { "type": "boolean", "deprecated": true },
          "metadata": {
            "description": "Metadata of conversation.",
            "allOf": [{ "$ref": "#/components/schemas/ConversationMetadata" }]
          },
          "participants": {
            "description": "All participants of conversation including the researcher.\nThe researcher will be the API owner/admin account for the api team.",
            "type": "array",
            "items": { "$ref": "#/components/schemas/ConversationParticipant" }
          }
        },
        "required": [
          "createdAt",
          "uid",
          "name",
          "deleted",
          "locked",
          "read",
          "participants"
        ]
      },
      "MessagingUser": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "description": "Unique identifier for messaging user."
          },
          "foreignId": {
            "type": "string",
            "description": "UserId of messaging user."
          },
          "firstName": {
            "type": "string",
            "description": "First name of user."
          },
          "lastName": {
            "type": "string",
            "description": "Last name initial of user."
          }
        },
        "required": ["uid", "firstName", "lastName"]
      },
      "Message": {
        "type": "object",
        "properties": {
          "createdAt": { "type": "string" },
          "updatedAt": { "type": "string" },
          "uid": {
            "type": "string",
            "description": "Unique identifier of message."
          },
          "body": { "type": "string", "description": "Body of message." },
          "conversation": {
            "description": "Conversation message belongs to.",
            "allOf": [{ "$ref": "#/components/schemas/MinimalConversation" }]
          },
          "sender": {
            "description": "Sender of message.\nEither a participant or the api team owner/admin.\nTo find the external researcher, use `conversation.metadata.externalResearcherId`.",
            "allOf": [{ "$ref": "#/components/schemas/MessagingUser" }]
          }
        },
        "required": ["createdAt", "uid", "body", "conversation", "sender"]
      },
      "MessagesPaginatedDto": {
        "type": "object",
        "properties": {
          "totalResults": {
            "type": "number",
            "description": "The total number of results possible, which is only provided in the response when `includeCount` is passed as `true` within a request."
          },
          "page": { "type": "number", "default": 1 },
          "pageSize": { "type": "number", "default": 50 },
          "results": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Message" }
          }
        },
        "required": ["page", "pageSize", "results"]
      },
      "MessageInboxDto": {
        "type": "object",
        "properties": {
          "read": {
            "type": "boolean",
            "description": "All conversations in the inbox have been read."
          },
          "count": {
            "type": "number",
            "description": "Count of conversations user is in."
          },
          "unreadIds": {
            "description": "List of unread conversations uids.",
            "type": "array",
            "items": { "type": "string" }
          },
          "unreadCount": {
            "type": "number",
            "description": "Count of unread conversations in the inbox."
          }
        },
        "required": ["read", "count", "unreadIds", "unreadCount"]
      },
      "CreateMessageDto": {
        "type": "object",
        "properties": {
          "conversationUid": { "type": "string" },
          "body": { "type": "string" }
        },
        "required": ["conversationUid", "body"]
      },
      "CreateConversationDto": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "description": "ProjectId of the project the coversation belongs to.",
            "format": "ObjectId"
          },
          "participantUserIds": {
            "description": "UserId(s) of participants of conversation (not including researcher).\nMinimum 1 participant required.",
            "type": "array",
            "items": { "type": "string", "format": "ObjectId" }
          },
          "externalResearcherId": {
            "type": "string",
            "description": "Derived from project values.",
            "deprecated": true
          },
          "externalTeamId": {
            "type": "string",
            "description": "Derived from project values.",
            "deprecated": true
          },
          "externalCompanyId": {
            "type": "string",
            "description": "Derived from project values.",
            "deprecated": true
          }
        },
        "required": ["projectId", "participantUserIds"]
      },
      "MinimalMessage": {
        "type": "object",
        "properties": {
          "createdAt": { "type": "string" },
          "updatedAt": { "type": "string" },
          "uid": {
            "type": "string",
            "description": "Unique identifier of message."
          },
          "body": { "type": "string", "description": "Body of message." },
          "sender": {
            "description": "Sender of message.",
            "allOf": [{ "$ref": "#/components/schemas/MessagingUser" }]
          }
        },
        "required": ["createdAt", "uid", "body", "sender"]
      },
      "LatestMessage": {
        "type": "object",
        "properties": {
          "createdAt": { "type": "string" },
          "updatedAt": { "type": "string" },
          "uid": {
            "type": "string",
            "description": "Unique identifier for the message."
          },
          "body": { "type": "string", "description": "Body of the message." }
        },
        "required": ["createdAt", "uid", "body"]
      },
      "Conversation": {
        "type": "object",
        "properties": {
          "createdAt": { "type": "string" },
          "updatedAt": { "type": "string" },
          "uid": {
            "type": "string",
            "description": "Unique identifier of conversation."
          },
          "name": { "type": "string", "description": "Name of conversation." },
          "deleted": {
            "type": "boolean",
            "description": "If conversation is marked as deleted."
          },
          "locked": {
            "type": "boolean",
            "description": "If conversation is locked."
          },
          "read": { "type": "boolean", "deprecated": true },
          "metadata": {
            "description": "Metadata of conversation.",
            "allOf": [{ "$ref": "#/components/schemas/ConversationMetadata" }]
          },
          "user": {
            "description": "User who created the conversation.\nThis will be the API owner/admin account for the api team.\nFirst name and last name will belong to api team user, not external researcher name.\nExternal researcherId will be stored in metadata, which can be used to lookup your external researcher's info internally.",
            "allOf": [{ "$ref": "#/components/schemas/MessagingUser" }]
          },
          "participants": {
            "description": "All participants of conversation including the researcher.\nThe researcher will be the API owner/admin account for the api team.",
            "type": "array",
            "items": { "$ref": "#/components/schemas/ConversationParticipant" }
          },
          "messages": {
            "description": "All messages in conversation.",
            "type": "array",
            "items": { "$ref": "#/components/schemas/MinimalMessage" }
          },
          "latestMessage": {
            "description": "Latest message in conversation.",
            "allOf": [{ "$ref": "#/components/schemas/LatestMessage" }]
          },
          "messagesCount": {
            "type": "number",
            "description": "Count of messages in conversation."
          }
        },
        "required": [
          "createdAt",
          "uid",
          "name",
          "deleted",
          "locked",
          "read",
          "user",
          "participants",
          "messages",
          "latestMessage",
          "messagesCount"
        ]
      },
      "ConversationsPaginatedDto": {
        "type": "object",
        "properties": {
          "totalResults": {
            "type": "number",
            "description": "The total number of results possible, which is only provided in the response when `includeCount` is passed as `true` within a request."
          },
          "page": { "type": "number", "default": 1 },
          "pageSize": { "type": "number", "default": 50 },
          "results": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Conversation" }
          }
        },
        "required": ["page", "pageSize", "results"]
      },
      "UpdateConversationDto": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "description": "Name of conversation." },
          "locked": {
            "type": "boolean",
            "description": "If conversation is locked."
          }
        }
      },
      "AddParticipantDto": {
        "type": "object",
        "properties": {
          "participantUserId": {
            "type": "string",
            "description": "User ID of the participant to add.",
            "format": "ObjectId"
          }
        },
        "required": ["participantUserId"]
      },
      "Gender": {
        "type": "string",
        "enum": ["male", "female", "other", "N/A"]
      },
      "CreateProfileDto": {
        "type": "object",
        "properties": {
          "email": { "type": "string" },
          "workEmail": {
            "type": "string",
            "description": "Need work email to make sure this participant is eligible for B2B projects.\nNote: Check if this email is not being used by any other participant, otherwise it will skip work email verification."
          },
          "firstName": { "type": "string" },
          "lastName": { "type": "string" },
          "password": { "type": "string" },
          "gender": { "$ref": "#/components/schemas/Gender" }
        },
        "required": [
          "email",
          "workEmail",
          "firstName",
          "lastName",
          "password",
          "gender"
        ]
      },
      "JobFunction": {
        "type": "string",
        "description": "Available for Industry professionals (B2B) projects\nMax: 3",
        "enum": [
          "accountingAuditing",
          "administrative",
          "advertising",
          "analyst",
          "artCreative",
          "businessDevelopment",
          "consulting",
          "customerService",
          "distribution",
          "design",
          "education",
          "finance",
          "generalBusiness",
          "healthcareProvider",
          "humanResources",
          "informationTechnology",
          "legal",
          "management",
          "manufacturing",
          "marketing",
          "other",
          "publicRelations",
          "purchasing",
          "productManagement",
          "projectManagement",
          "production",
          "qualityAssurance",
          "research",
          "sales",
          "science",
          "strategyPlanning",
          "supplyChain",
          "training",
          "writingEditing"
        ]
      },
      "SimpleSkill": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "ObjectId" },
          "name": { "type": "string" },
          "slug": { "type": "string" },
          "validated": { "type": "boolean", "default": false },
          "type": { "type": "string", "default": "skill" }
        },
        "required": ["id", "name", "slug", "validated", "type"]
      },
      "SimpleTopic": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "ObjectId" },
          "name": { "type": "string" }
        },
        "required": ["id", "name"]
      },
      "CompanySize": {
        "type": "string",
        "enum": [
          "selfemployed",
          "1-10",
          "11-50",
          "51-200",
          "201-500",
          "501-1000",
          "1001-5000",
          "5001-10000",
          "10000+",
          "all"
        ]
      },
      "CountryCode": {
        "type": "string",
        "enum": [
          "AF",
          "AX",
          "AL",
          "DZ",
          "AS",
          "AD",
          "AO",
          "AI",
          "AQ",
          "AG",
          "AR",
          "AM",
          "AW",
          "AU",
          "AT",
          "AZ",
          "BS",
          "BH",
          "BD",
          "BB",
          "BY",
          "BE",
          "BZ",
          "BJ",
          "BM",
          "BT",
          "BO",
          "BA",
          "BW",
          "BV",
          "BR",
          "VG",
          "IO",
          "BN",
          "BG",
          "BF",
          "BI",
          "CV",
          "KH",
          "CM",
          "CA",
          "KY",
          "CF",
          "TD",
          "CL",
          "CN",
          "CX",
          "CC",
          "CO",
          "KM",
          "CG",
          "CK",
          "CR",
          "HR",
          "CU",
          "CW",
          "CY",
          "CZ",
          "CI",
          "CD",
          "DK",
          "DJ",
          "DM",
          "DO",
          "EC",
          "EG",
          "SV",
          "GQ",
          "ER",
          "EE",
          "SZ",
          "ET",
          "FK",
          "FO",
          "FJ",
          "FI",
          "FR",
          "GF",
          "PF",
          "TF",
          "GA",
          "GM",
          "GE",
          "DE",
          "GH",
          "GI",
          "GR",
          "GL",
          "GD",
          "GP",
          "GU",
          "GT",
          "GG",
          "GN",
          "GW",
          "GY",
          "HT",
          "HM",
          "VA",
          "HN",
          "HK",
          "HU",
          "IS",
          "IN",
          "ID",
          "IR",
          "IQ",
          "IE",
          "IM",
          "IL",
          "IT",
          "JM",
          "JP",
          "JE",
          "JO",
          "KZ",
          "KE",
          "KI",
          "KW",
          "KG",
          "LA",
          "LV",
          "LB",
          "LS",
          "LR",
          "LY",
          "LI",
          "LT",
          "LU",
          "MO",
          "MG",
          "MW",
          "MY",
          "MV",
          "ML",
          "MT",
          "MH",
          "MQ",
          "MR",
          "MU",
          "YT",
          "MX",
          "FM",
          "MD",
          "MC",
          "MN",
          "ME",
          "MS",
          "MA",
          "MZ",
          "NA",
          "NR",
          "NP",
          "NL",
          "NC",
          "NZ",
          "NI",
          "NE",
          "NG",
          "NU",
          "NF",
          "KP",
          "MK",
          "MP",
          "NO",
          "OM",
          "PK",
          "PW",
          "PS",
          "PA",
          "PG",
          "PY",
          "PE",
          "PH",
          "PN",
          "PL",
          "PT",
          "PR",
          "QA",
          "RO",
          "RW",
          "RE",
          "SH",
          "KN",
          "LC",
          "PM",
          "VC",
          "WS",
          "SM",
          "ST",
          "SA",
          "SN",
          "RS",
          "SC",
          "SL",
          "SG",
          "SK",
          "SI",
          "SB",
          "SO",
          "ZA",
          "GS",
          "KR",
          "ES",
          "LK",
          "SD",
          "SR",
          "SJ",
          "SE",
          "CH",
          "TJ",
          "TZ",
          "TH",
          "TL",
          "TG",
          "TK",
          "TO",
          "TT",
          "TN",
          "TM",
          "TC",
          "TV",
          "TR",
          "VI",
          "UG",
          "UA",
          "AE",
          "GB",
          "UM",
          "US",
          "UY",
          "UZ",
          "VU",
          "VE",
          "VN",
          "WF",
          "EH",
          "YE",
          "ZM",
          "ZW",
          "all"
        ]
      },
      "ProfileLocationCityLocation": {
        "type": "object",
        "properties": {
          "latitude": { "type": "number" },
          "longitude": { "type": "number" }
        },
        "required": ["latitude", "longitude"]
      },
      "ProfileLocationCity": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "country": { "$ref": "#/components/schemas/CountryCode" },
          "city": { "type": "string" },
          "state": { "type": "string" },
          "formattedAddress": { "type": "string" },
          "administrative_area_level_1": { "type": "string" },
          "postal_code": { "type": "string" },
          "locality": { "type": "string" },
          "location": {
            "$ref": "#/components/schemas/ProfileLocationCityLocation"
          },
          "zip": { "type": "string", "nullable": true }
        },
        "required": ["id", "country", "city", "formattedAddress", "location"]
      },
      "ProfileLocationLoc": {
        "type": "object",
        "properties": {
          "type": { "type": "string" },
          "coordinates": { "type": "array", "items": { "type": "number" } }
        },
        "required": ["type", "coordinates"]
      },
      "ProfileLocation": {
        "type": "object",
        "properties": {
          "city": { "$ref": "#/components/schemas/ProfileLocationCity" },
          "zipcode": { "type": "string", "default": null },
          "state": { "type": "string" },
          "loc": { "$ref": "#/components/schemas/ProfileLocationLoc" }
        },
        "required": ["city", "loc"]
      },
      "EducationLevel": {
        "type": "string",
        "enum": [
          "somehighschool",
          "highschoolgraduate",
          "somecollegenodegree",
          "tradetechnicalvocationaltraining",
          "associatedegree",
          "bachelordegree",
          "masterdegree",
          "doctoratedegree",
          "N/A"
        ]
      },
      "Ethnicities": {
        "type": "string",
        "enum": [
          "americanindianalaskannative",
          "hispaniclatino",
          "blackorafricanamerican",
          "asianpacificislander",
          "whitecaucasian",
          "middleeastern",
          "multipleethnicity",
          "prefernotdisclose",
          "N/A"
        ]
      },
      "HouseholdIncome": {
        "type": "string",
        "enum": [
          "<30000",
          "30000-39999",
          "40000-59999",
          "60000-79999",
          "80000-99999",
          "100000-149999",
          "150000-199999",
          "200000+",
          "all",
          "all"
        ]
      },
      "SeniorityLevel": {
        "type": "string",
        "enum": [
          "unpaid",
          "student",
          "training",
          "entrylevel",
          "senior",
          "manager",
          "director",
          "chiefofficer",
          "partner",
          "vicepresident"
        ]
      },
      "Profile": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "ObjectId" },
          "userId": { "type": "string", "format": "ObjectId" },
          "firstName": { "type": "string" },
          "lastInitial": { "type": "string" },
          "picture": { "type": "string", "nullable": true },
          "jobTitle": { "type": "string" },
          "jobFunctions": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/JobFunction" }
          },
          "linkedinUrl": { "type": "string" },
          "skills": {
            "default": [],
            "type": "array",
            "items": { "$ref": "#/components/schemas/SimpleSkill" }
          },
          "topics": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SimpleTopic" }
          },
          "company": { "type": "string" },
          "companySize": { "$ref": "#/components/schemas/CompanySize" },
          "location": { "$ref": "#/components/schemas/ProfileLocation" },
          "gender": { "$ref": "#/components/schemas/Gender" },
          "age": { "type": "string" },
          "educationLevel": { "$ref": "#/components/schemas/EducationLevel" },
          "ethnicity": { "$ref": "#/components/schemas/Ethnicities" },
          "householdIncome": { "$ref": "#/components/schemas/HouseholdIncome" },
          "industry": { "type": "array", "items": { "type": "string" } },
          "seniorityLevel": { "$ref": "#/components/schemas/SeniorityLevel" },
          "gdprDeletedAt": {
            "type": "string",
            "description": "Indicates this profile was GDPR deleted, and their data has been anonymized. Their associated screeners will also be deleted."
          },
          "socialLinks": { "type": "object" }
        },
        "required": [
          "id",
          "userId",
          "firstName",
          "lastInitial",
          "skills",
          "companySize",
          "location",
          "gender",
          "educationLevel",
          "ethnicity",
          "householdIncome",
          "industry"
        ]
      },
      "B2bAudienceTypes": {
        "type": "string",
        "description": "Audience type to be targeted for this project. Example values: Industry professionals (B2B) or General Population (B2C)",
        "default": "b2b",
        "enum": ["b2b"]
      },
      "ResearchTypes": {
        "type": "string",
        "description": "Research type for this project, if it is in-person or remote",
        "enum": ["inPerson", "remote"]
      },
      "KindOfResearch": {
        "type": "string",
        "description": "Kind of research to be conducted for this project. [Details here](https://help.respondent.io/en/articles/5489302-research-method-and-types-of-research-projects).\nIf `typeOfResearch == inPerson` &rarr; allowed values are: [`oneOnOne`, `focusGroup`, `inRespondentHome`, `inRespondentOffice`]\nIf `typeOfResearch == remote` &rarr; allowed values are: [`oneOnOne`, `focusGroup`, `unmoderatedStudy`, `survey`, `diaryStudy`]",
        "enum": [
          "oneOnOne",
          "focusGroup",
          "inRespondentHome",
          "inRespondentOffice",
          "unmoderatedStudy",
          "survey",
          "diaryStudy"
        ]
      },
      "UnmoderatedStudyOrSurvey": {
        "type": "object",
        "properties": {
          "remoteCommunicationDetails": {
            "type": "string",
            "description": "Custom url for the study, to be sent in the invitation .\nCan be updated when inviting the participant."
          },
          "specialInstructions": {
            "type": "string",
            "description": "Special instructions for the study, to be sent in the invitation.\nCan be updated when inviting the participant.\nCharacter limit: Max 2000."
          }
        }
      },
      "ProjectCountryCode": {
        "type": "string",
        "enum": [
          "AX",
          "AL",
          "DZ",
          "AS",
          "AD",
          "AI",
          "AQ",
          "AG",
          "AR",
          "AM",
          "AW",
          "AU",
          "AT",
          "BS",
          "BH",
          "BD",
          "BB",
          "BY",
          "BE",
          "BZ",
          "BJ",
          "BM",
          "BT",
          "BO",
          "BA",
          "BW",
          "BV",
          "BR",
          "VG",
          "IO",
          "BN",
          "BG",
          "BF",
          "BI",
          "CV",
          "CM",
          "CA",
          "KY",
          "CF",
          "TD",
          "CL",
          "CX",
          "CC",
          "CO",
          "KM",
          "CG",
          "CK",
          "CR",
          "HR",
          "CU",
          "CW",
          "CY",
          "CZ",
          "CI",
          "CD",
          "DK",
          "DJ",
          "DM",
          "EC",
          "EG",
          "SV",
          "GQ",
          "ER",
          "EE",
          "SZ",
          "ET",
          "FK",
          "FO",
          "FJ",
          "FI",
          "FR",
          "GF",
          "PF",
          "TF",
          "GA",
          "GM",
          "GE",
          "DE",
          "GI",
          "GR",
          "GL",
          "GD",
          "GP",
          "GU",
          "GT",
          "GG",
          "GN",
          "GW",
          "GY",
          "HT",
          "HM",
          "VA",
          "HN",
          "HK",
          "HU",
          "IS",
          "IN",
          "ID",
          "IR",
          "IQ",
          "IE",
          "IM",
          "IL",
          "IT",
          "JM",
          "JP",
          "JE",
          "JO",
          "KZ",
          "KE",
          "KI",
          "LA",
          "LV",
          "LB",
          "LR",
          "LY",
          "LI",
          "LT",
          "LU",
          "MG",
          "MW",
          "MY",
          "MV",
          "ML",
          "MT",
          "MH",
          "MQ",
          "MR",
          "MU",
          "YT",
          "MX",
          "FM",
          "MD",
          "MC",
          "MN",
          "ME",
          "MS",
          "MA",
          "MZ",
          "NA",
          "NR",
          "NP",
          "NL",
          "NC",
          "NZ",
          "NI",
          "NE",
          "NU",
          "NF",
          "KP",
          "MK",
          "MP",
          "NO",
          "OM",
          "PW",
          "PA",
          "PG",
          "PY",
          "PE",
          "PH",
          "PN",
          "PL",
          "PT",
          "PR",
          "QA",
          "RO",
          "RW",
          "RE",
          "SH",
          "KN",
          "LC",
          "PM",
          "VC",
          "WS",
          "SM",
          "ST",
          "SA",
          "RS",
          "SC",
          "SL",
          "SG",
          "SK",
          "SI",
          "SB",
          "SO",
          "ZA",
          "GS",
          "KR",
          "ES",
          "LK",
          "SR",
          "SJ",
          "SE",
          "CH",
          "TZ",
          "TH",
          "TL",
          "TG",
          "TK",
          "TO",
          "TT",
          "TN",
          "TR",
          "TM",
          "TC",
          "TV",
          "VI",
          "UG",
          "AE",
          "GB",
          "UM",
          "US",
          "UY",
          "VU",
          "VE",
          "VN",
          "WF",
          "EH",
          "ZM",
          "ZW",
          "all"
        ]
      },
      "ProjectLocationInPerson": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "address1": { "type": "string" },
          "zipcode": { "type": "string" },
          "city": { "type": "string" },
          "region": { "type": "string" },
          "state": { "type": "string" },
          "country": { "$ref": "#/components/schemas/ProjectCountryCode" },
          "formattedAddress": { "type": "string" },
          "latitude": { "type": "number" },
          "longitude": { "type": "number" }
        },
        "required": [
          "address1",
          "city",
          "country",
          "formattedAddress",
          "latitude",
          "longitude"
        ]
      },
      "AgeGroup": {
        "type": "string",
        "enum": ["18-20", "21-29", "30-39", "40-54", "55+", "N/A"]
      },
      "NdaTypeDeprecated": {
        "type": "string",
        "description": "Use ndaDetails.ndaType.",
        "deprecated": true,
        "default": "none",
        "enum": ["none", "file", "link"]
      },
      "Automation": {
        "type": "object",
        "properties": {
          "autopay": { "type": "boolean" },
          "autoinvite": { "type": "boolean" }
        },
        "required": ["autopay"]
      },
      "KeyQualifierB2b": {
        "type": "string",
        "description": "You can select audience signals to restrict who qualifies for this project. Learn more about filters vs signals.\nLearn more about filters vs signals: https://help.respondent.io/en/articles/5482285-filtering-targeting-and-qualifying",
        "enum": [
          "targetHouseholdIncome",
          "targetProfessionalIndustries",
          "targetCompanySize",
          "targetAudienceSkills"
        ]
      },
      "PastParticipationMonths": {
        "type": "string",
        "description": "Number of months to exclude participants who have previously participated in a study.\nUsed only when `hasNeverParticipated` is false. For example, `months: 3` excludes participants who participated in the past 3 months.",
        "enum": ["-1", "1", "2", "3", "6", "9", "12"]
      },
      "UpsertPastParticipationDto": {
        "type": "object",
        "properties": {
          "hasNeverParticipated": {
            "type": "boolean",
            "description": "If true &rarr; only include participants who have never participated in a project with the researcher.\nIf false &rarr; only include participants who have not participated in a project with the researcher in the past `months` months."
          },
          "months": { "$ref": "#/components/schemas/PastParticipationMonths" },
          "since": {
            "format": "date-time",
            "type": "string",
            "description": "It's autocalculated based on the `hasNeverParticipated` / `months` entered and displays in the API response",
            "deprecated": true
          }
        }
      },
      "LocationCoordinate": {
        "type": "object",
        "properties": {
          "longitude": { "type": "number" },
          "latitude": { "type": "number" }
        },
        "required": ["longitude", "latitude"]
      },
      "CreateLocationDto": {
        "type": "object",
        "properties": {
          "googleId": { "type": "string" },
          "region": { "type": "string" },
          "city": { "type": "string" },
          "state": { "type": "string" },
          "country": { "$ref": "#/components/schemas/CountryCode" },
          "zipcode": { "type": "string" },
          "location": { "$ref": "#/components/schemas/LocationCoordinate" }
        },
        "required": ["city", "country", "location"]
      },
      "CreateProjectCitiesDto": {
        "type": "object",
        "properties": {
          "location": { "$ref": "#/components/schemas/CreateLocationDto" }
        },
        "required": ["location"]
      },
      "NdaType": {
        "type": "string",
        "default": "none",
        "enum": ["none", "file", "link"]
      },
      "NdaDetailsDto": {
        "type": "object",
        "properties": {
          "ndaType": { "$ref": "#/components/schemas/NdaType" },
          "ndaLink": { "type": "string", "nullable": true }
        }
      },
      "ExternalResearcher": {
        "type": "object",
        "properties": {
          "researcherId": {
            "type": "string",
            "description": "A unique researcher ID provided by you, used to associate and filter projects."
          },
          "researcherName": {
            "type": "string",
            "description": "To be used when sending messages or emails to the respondent. Full name not required."
          },
          "teamId": {
            "type": "string",
            "description": "Optional additional filtering. This researcher's internal teamId from your organization."
          },
          "companyName": { "type": "string" },
          "companyId": {
            "type": "string",
            "description": "Optional additional filtering. This researcher's internal companyId from your organization."
          },
          "bookingUrl": {
            "type": "string",
            "description": "Link to book a meeting with the researcher. Required if targetResearchMethodology of project is oneOnOne or focusGroup."
          }
        },
        "required": ["researcherId"]
      },
      "CreateB2bProjectDto": {
        "type": "object",
        "properties": {
          "publicTitle": {
            "type": "string",
            "description": "Project Title.\nThis is visible to Respondents, do not mention any incentive amount as you may change it during your project."
          },
          "publicInternalName": {
            "type": "string",
            "description": "Internal Project Name.\nThis is visible only to your organization.\nCharacter Limit: Min 3 and Max 50."
          },
          "publicDescription": {
            "type": "string",
            "description": "Project Details.\nThis is visible to Respondents.\nCharacter Limit: Max 800."
          },
          "targetMarketType": {
            "$ref": "#/components/schemas/B2bAudienceTypes"
          },
          "typeOfResearch": { "$ref": "#/components/schemas/ResearchTypes" },
          "targetResearchMethodology": {
            "$ref": "#/components/schemas/KindOfResearch"
          },
          "unmoderatedStudyOrSurvey": {
            "description": "For Unmoderated Studies and Surveys only.",
            "allOf": [
              { "$ref": "#/components/schemas/UnmoderatedStudyOrSurvey" }
            ]
          },
          "participantTimeRequiredMinutes": { "type": "number" },
          "incentiveAmount": {
            "type": "number",
            "description": "Dollars ranging: Min 5 and Max 1000.\nPro tip: Set your incentive at or above $2 per minute (B2C) or $3 per minute (B2B) to attract quality participants faster.\nMore tips to pick the right incentive: https://help.respondent.io/en/articles/5471087-what-is-the-best-incentive-for-my-research-project"
          },
          "targetNumberOfParticipants": {
            "type": "number",
            "description": "Number of Participants\nWe will recruit up to 3 times your target number of qualified participants.\nNumber Limit: Min 1 and Max 500."
          },
          "targetCountry": {
            "$ref": "#/components/schemas/ProjectCountryCode"
          },
          "targetCountries": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ProjectCountryCode" }
          },
          "targetJobFunctions": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/JobFunction" }
          },
          "targetLocationRespondentInPerson": {
            "description": "Required for In-Person projects only.\nPlease provide the full address (including city & state if applicable) where the project will be conducted.",
            "allOf": [
              { "$ref": "#/components/schemas/ProjectLocationInPerson" }
            ]
          },
          "targetHouseholdIncome": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/HouseholdIncome" }
          },
          "targetGenders": { "$ref": "#/components/schemas/Gender" },
          "targetEducation": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/EducationLevel" }
          },
          "targetEthnicities": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Ethnicities" }
          },
          "targetAgeGroups": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/AgeGroup" }
          },
          "ndaType": { "$ref": "#/components/schemas/NdaTypeDeprecated" },
          "ndaLink": {
            "type": "string",
            "nullable": true,
            "description": "Use ndaDetails.ndaLink.",
            "deprecated": true
          },
          "seniority": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SeniorityLevel" }
          },
          "automations": {
            "description": "- Autopay is used to automatically pay participants after they complete a project.\n  - If not provided, defaults to `true`.\n- Autoinvite is used to automatically invite participants to a project if they qualify after completing the screener.\n  - Only available when `targetResearchMethodology` is one of: [`unmoderatedStudy`, `survey`].\n  - If not provided, defaults to `false`.",
            "allOf": [{ "$ref": "#/components/schemas/Automation" }]
          },
          "keyQualifiers": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/KeyQualifierB2b" }
          },
          "filterPastParticipation": {
            "description": "- If researcher wants to filter out participants who have participated in past projects.\n- Past Participation logic is used at Researcher level based on external reseacher id.\n- The participant must have been paid for a project to count as a past participant.\n- Past participation filtering is available within 4 hours of a payout being made, NOT immediately after payment.",
            "allOf": [
              { "$ref": "#/components/schemas/UpsertPastParticipationDto" }
            ]
          },
          "targetCompanySize": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CompanySize" }
          },
          "targetCities": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CreateProjectCitiesDto" }
          },
          "ndaDetails": {
            "description": "ndaType = file is not supported on this endpoint. Use the [Upload NDA File endpoint](https://developers.respondent.io/reference/projectscontroller_uploadfilesformdata) to upload NDA documents",
            "allOf": [{ "$ref": "#/components/schemas/NdaDetailsDto" }]
          },
          "externalResearcher": {
            "description": "Required for all projects to identify your researcher with Respondent to differentiate from other researchers recruiting through your platform.",
            "allOf": [{ "$ref": "#/components/schemas/ExternalResearcher" }]
          },
          "targetProfessionalIndustries": {
            "description": "Pass ids only.\nIDs differ from staging to production.\nRequired for Industry professionals (B2B) projects.\nArray: Min 1 and Max 5.",
            "type": "array",
            "items": { "type": "string" }
          },
          "targetJobTitles": {
            "description": "Pass ids only.\nIDs differ from staging to production.\nArray: Max 10.",
            "type": "array",
            "items": { "type": "string" }
          },
          "targetAudienceSkills": {
            "description": "Pass ids only.\nIDs differ from staging to production.\nArray: Min 0 and Max: 25.\nSelect skills, knowledge areas, tools and/or certifications you would like to target.",
            "type": "array",
            "items": { "type": "string" }
          }
        },
        "required": [
          "publicTitle",
          "publicInternalName",
          "targetMarketType",
          "typeOfResearch",
          "targetResearchMethodology",
          "participantTimeRequiredMinutes",
          "incentiveAmount",
          "targetNumberOfParticipants",
          "externalResearcher",
          "targetProfessionalIndustries"
        ]
      },
      "B2cAudienceTypes": {
        "type": "string",
        "description": "Audience type to be targeted for this project. Example values: Industry professionals (B2B) or General Population (B2C)",
        "default": "b2c",
        "enum": ["b2c"]
      },
      "KeyQualifierB2c": {
        "type": "string",
        "description": "You can select audience signals to restrict who qualifies for this project. Learn more about filters vs signals.\nLearn more about filters vs signals: https://help.respondent.io/en/articles/5482285-filtering-targeting-and-qualifying",
        "enum": ["targetProjectTopics"]
      },
      "CreateB2cProjectDto": {
        "type": "object",
        "properties": {
          "publicTitle": {
            "type": "string",
            "description": "Project Title.\nThis is visible to Respondents, do not mention any incentive amount as you may change it during your project."
          },
          "publicInternalName": {
            "type": "string",
            "description": "Internal Project Name.\nThis is visible only to your organization.\nCharacter Limit: Min 3 and Max 50."
          },
          "publicDescription": {
            "type": "string",
            "description": "Project Details.\nThis is visible to Respondents.\nCharacter Limit: Max 800."
          },
          "targetMarketType": {
            "$ref": "#/components/schemas/B2cAudienceTypes"
          },
          "typeOfResearch": { "$ref": "#/components/schemas/ResearchTypes" },
          "targetResearchMethodology": {
            "$ref": "#/components/schemas/KindOfResearch"
          },
          "unmoderatedStudyOrSurvey": {
            "description": "For Unmoderated Studies and Surveys only.",
            "allOf": [
              { "$ref": "#/components/schemas/UnmoderatedStudyOrSurvey" }
            ]
          },
          "participantTimeRequiredMinutes": { "type": "number" },
          "incentiveAmount": {
            "type": "number",
            "description": "Dollars ranging: Min 5 and Max 1000.\nPro tip: Set your incentive at or above $2 per minute (B2C) or $3 per minute (B2B) to attract quality participants faster.\nMore tips to pick the right incentive: https://help.respondent.io/en/articles/5471087-what-is-the-best-incentive-for-my-research-project"
          },
          "targetNumberOfParticipants": {
            "type": "number",
            "description": "Number of Participants\nWe will recruit up to 3 times your target number of qualified participants.\nNumber Limit: Min 1 and Max 500."
          },
          "targetCountry": {
            "$ref": "#/components/schemas/ProjectCountryCode"
          },
          "targetCountries": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ProjectCountryCode" }
          },
          "targetLocationRespondentInPerson": {
            "description": "Required for In-Person projects only.\nPlease provide the full address (including city & state if applicable) where the project will be conducted.",
            "allOf": [
              { "$ref": "#/components/schemas/ProjectLocationInPerson" }
            ]
          },
          "targetHouseholdIncome": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/HouseholdIncome" }
          },
          "targetGenders": { "$ref": "#/components/schemas/Gender" },
          "targetEducation": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/EducationLevel" }
          },
          "targetEthnicities": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Ethnicities" }
          },
          "targetAgeGroups": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/AgeGroup" }
          },
          "ndaType": { "$ref": "#/components/schemas/NdaTypeDeprecated" },
          "ndaLink": {
            "type": "string",
            "nullable": true,
            "description": "Use ndaDetails.ndaLink.",
            "deprecated": true
          },
          "automations": {
            "description": "- Autopay is used to automatically pay participants after they complete a project.\n  - If not provided, defaults to `true`.\n- Autoinvite is used to automatically invite participants to a project if they qualify after completing the screener.\n  - Only available when `targetResearchMethodology` is one of: [`unmoderatedStudy`, `survey`].\n  - If not provided, defaults to `false`.",
            "allOf": [{ "$ref": "#/components/schemas/Automation" }]
          },
          "keyQualifiers": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/KeyQualifierB2c" }
          },
          "filterPastParticipation": {
            "description": "- If researcher wants to filter out participants who have participated in past projects.\n- Past Participation logic is used at Researcher level based on external reseacher id.\n- The participant must have been paid for a project to count as a past participant.\n- Past participation filtering is available within 4 hours of a payout being made, NOT immediately after payment.",
            "allOf": [
              { "$ref": "#/components/schemas/UpsertPastParticipationDto" }
            ]
          },
          "targetCities": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CreateProjectCitiesDto" }
          },
          "ndaDetails": {
            "description": "ndaType = file is not supported on this endpoint. Use the [Upload NDA File endpoint](https://developers.respondent.io/reference/projectscontroller_uploadfilesformdata) to upload NDA documents",
            "allOf": [{ "$ref": "#/components/schemas/NdaDetailsDto" }]
          },
          "externalResearcher": {
            "description": "Required for all projects to identify your researcher with Respondent to differentiate from other researchers recruiting through your platform.",
            "allOf": [{ "$ref": "#/components/schemas/ExternalResearcher" }]
          },
          "targetProjectTopics": {
            "description": "Pass ids only.\nIDs differ from staging to production.\nRequired for General Population (B2C) projects only.\nTagging your projects with topics will better help match your general population project with participants that have indicated interest in these topics.\nArray: Min 1 and Max 2.",
            "type": "array",
            "items": { "type": "string" }
          }
        },
        "required": [
          "publicTitle",
          "publicInternalName",
          "targetMarketType",
          "typeOfResearch",
          "targetResearchMethodology",
          "participantTimeRequiredMinutes",
          "incentiveAmount",
          "targetNumberOfParticipants",
          "externalResearcher",
          "targetProjectTopics"
        ]
      },
      "UpdateDraftB2cProjectDto": {
        "type": "object",
        "properties": {
          "publicTitle": {
            "type": "string",
            "description": "Project Title.\nThis is visible to Respondents, do not mention any incentive amount as you may change it during your project."
          },
          "publicInternalName": {
            "type": "string",
            "description": "Internal Project Name.\nThis is visible only to your organization.\nCharacter Limit: Min 3 and Max 50."
          },
          "publicDescription": {
            "type": "string",
            "description": "Project Details.\nThis is visible to Respondents.\nCharacter Limit: Max 800."
          },
          "targetMarketType": {
            "$ref": "#/components/schemas/B2cAudienceTypes"
          },
          "typeOfResearch": { "$ref": "#/components/schemas/ResearchTypes" },
          "targetResearchMethodology": {
            "$ref": "#/components/schemas/KindOfResearch"
          },
          "unmoderatedStudyOrSurvey": {
            "description": "For Unmoderated Studies and Surveys only.",
            "allOf": [
              { "$ref": "#/components/schemas/UnmoderatedStudyOrSurvey" }
            ]
          },
          "participantTimeRequiredMinutes": { "type": "number" },
          "incentiveAmount": {
            "type": "number",
            "description": "Dollars ranging: Min 5 and Max 1000.\nPro tip: Set your incentive at or above $2 per minute (B2C) or $3 per minute (B2B) to attract quality participants faster.\nMore tips to pick the right incentive: https://help.respondent.io/en/articles/5471087-what-is-the-best-incentive-for-my-research-project"
          },
          "targetNumberOfParticipants": {
            "type": "number",
            "description": "Number of Participants\nWe will recruit up to 3 times your target number of qualified participants.\nNumber Limit: Min 1 and Max 500."
          },
          "targetCountry": {
            "$ref": "#/components/schemas/ProjectCountryCode"
          },
          "targetCountries": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ProjectCountryCode" }
          },
          "targetLocationRespondentInPerson": {
            "description": "Required for In-Person projects only.\nPlease provide the full address (including city & state if applicable) where the project will be conducted.",
            "allOf": [
              { "$ref": "#/components/schemas/ProjectLocationInPerson" }
            ]
          },
          "targetHouseholdIncome": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/HouseholdIncome" }
          },
          "targetGenders": { "$ref": "#/components/schemas/Gender" },
          "targetEducation": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/EducationLevel" }
          },
          "targetEthnicities": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Ethnicities" }
          },
          "targetAgeGroups": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/AgeGroup" }
          },
          "ndaType": { "$ref": "#/components/schemas/NdaTypeDeprecated" },
          "ndaLink": {
            "type": "string",
            "nullable": true,
            "description": "Use ndaDetails.ndaLink.",
            "deprecated": true
          },
          "automations": { "$ref": "#/components/schemas/Automation" },
          "keyQualifiers": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/KeyQualifierB2c" }
          },
          "filterPastParticipation": {
            "description": "- If researcher wants to filter out participants who have participated in past projects.\n- Past Participation logic is used at Researcher level based on external reseacher id.\n- The participant must have been paid for a project to count as a past participant.\n- Past participation filtering is available within 4 hours of a payout being made, NOT immediately after payment.",
            "allOf": [
              { "$ref": "#/components/schemas/UpsertPastParticipationDto" }
            ]
          },
          "targetCities": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CreateProjectCitiesDto" }
          },
          "ndaDetails": {
            "description": "ndaType = file is not supported on this endpoint. Use the [Upload NDA File endpoint](https://developers.respondent.io/reference/projectscontroller_uploadfilesformdata) to upload NDA documents",
            "allOf": [{ "$ref": "#/components/schemas/NdaDetailsDto" }]
          },
          "externalResearcher": {
            "description": "Required for all projects to identify your researcher with Respondent to differentiate from other researchers recruiting through your platform.",
            "allOf": [{ "$ref": "#/components/schemas/ExternalResearcher" }]
          },
          "targetProjectTopics": {
            "description": "Pass ids only.\nIDs differ from staging to production.\nRequired for General Population (B2C) projects only.\nTagging your projects with topics will better help match your general population project with participants that have indicated interest in these topics.\nArray: Min 1 and Max 2.",
            "type": "array",
            "items": { "type": "string" }
          }
        }
      },
      "UpdateDraftB2bProjectDto": {
        "type": "object",
        "properties": {
          "publicTitle": {
            "type": "string",
            "description": "Project Title.\nThis is visible to Respondents, do not mention any incentive amount as you may change it during your project."
          },
          "publicInternalName": {
            "type": "string",
            "description": "Internal Project Name.\nThis is visible only to your organization.\nCharacter Limit: Min 3 and Max 50."
          },
          "publicDescription": {
            "type": "string",
            "description": "Project Details.\nThis is visible to Respondents.\nCharacter Limit: Max 800."
          },
          "targetMarketType": {
            "$ref": "#/components/schemas/B2bAudienceTypes"
          },
          "typeOfResearch": { "$ref": "#/components/schemas/ResearchTypes" },
          "targetResearchMethodology": {
            "$ref": "#/components/schemas/KindOfResearch"
          },
          "unmoderatedStudyOrSurvey": {
            "description": "For Unmoderated Studies and Surveys only.",
            "allOf": [
              { "$ref": "#/components/schemas/UnmoderatedStudyOrSurvey" }
            ]
          },
          "participantTimeRequiredMinutes": { "type": "number" },
          "incentiveAmount": {
            "type": "number",
            "description": "Dollars ranging: Min 5 and Max 1000.\nPro tip: Set your incentive at or above $2 per minute (B2C) or $3 per minute (B2B) to attract quality participants faster.\nMore tips to pick the right incentive: https://help.respondent.io/en/articles/5471087-what-is-the-best-incentive-for-my-research-project"
          },
          "targetNumberOfParticipants": {
            "type": "number",
            "description": "Number of Participants\nWe will recruit up to 3 times your target number of qualified participants.\nNumber Limit: Min 1 and Max 500."
          },
          "targetCountry": {
            "$ref": "#/components/schemas/ProjectCountryCode"
          },
          "targetCountries": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ProjectCountryCode" }
          },
          "targetJobFunctions": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/JobFunction" }
          },
          "targetLocationRespondentInPerson": {
            "description": "Required for In-Person projects only.\nPlease provide the full address (including city & state if applicable) where the project will be conducted.",
            "allOf": [
              { "$ref": "#/components/schemas/ProjectLocationInPerson" }
            ]
          },
          "targetHouseholdIncome": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/HouseholdIncome" }
          },
          "targetGenders": { "$ref": "#/components/schemas/Gender" },
          "targetEducation": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/EducationLevel" }
          },
          "targetEthnicities": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Ethnicities" }
          },
          "targetAgeGroups": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/AgeGroup" }
          },
          "ndaType": { "$ref": "#/components/schemas/NdaTypeDeprecated" },
          "ndaLink": {
            "type": "string",
            "nullable": true,
            "description": "Use ndaDetails.ndaLink.",
            "deprecated": true
          },
          "seniority": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SeniorityLevel" }
          },
          "automations": { "$ref": "#/components/schemas/Automation" },
          "keyQualifiers": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/KeyQualifierB2b" }
          },
          "filterPastParticipation": {
            "description": "- If researcher wants to filter out participants who have participated in past projects.\n- Past Participation logic is used at Researcher level based on external reseacher id.\n- The participant must have been paid for a project to count as a past participant.\n- Past participation filtering is available within 4 hours of a payout being made, NOT immediately after payment.",
            "allOf": [
              { "$ref": "#/components/schemas/UpsertPastParticipationDto" }
            ]
          },
          "targetCompanySize": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CompanySize" }
          },
          "targetCities": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CreateProjectCitiesDto" }
          },
          "ndaDetails": {
            "description": "ndaType = file is not supported on this endpoint. Use the [Upload NDA File endpoint](https://developers.respondent.io/reference/projectscontroller_uploadfilesformdata) to upload NDA documents",
            "allOf": [{ "$ref": "#/components/schemas/NdaDetailsDto" }]
          },
          "externalResearcher": {
            "description": "Required for all projects to identify your researcher with Respondent to differentiate from other researchers recruiting through your platform.",
            "allOf": [{ "$ref": "#/components/schemas/ExternalResearcher" }]
          },
          "targetProfessionalIndustries": {
            "description": "Pass ids only.\nIDs differ from staging to production.\nRequired for Industry professionals (B2B) projects.\nArray: Min 1 and Max 5.",
            "type": "array",
            "items": { "type": "string" }
          },
          "targetJobTitles": {
            "description": "Pass ids only.\nIDs differ from staging to production.\nArray: Max 10.",
            "type": "array",
            "items": { "type": "string" }
          },
          "targetAudienceSkills": {
            "description": "Pass ids only.\nIDs differ from staging to production.\nArray: Min 0 and Max: 25.\nSelect skills, knowledge areas, tools and/or certifications you would like to target.",
            "type": "array",
            "items": { "type": "string" }
          }
        }
      },
      "NdaDetails": {
        "type": "object",
        "properties": {
          "ndaType": { "$ref": "#/components/schemas/NdaType" },
          "ndaLink": { "type": "string", "nullable": true },
          "ndaFileUrl": { "type": "string", "nullable": true }
        }
      },
      "UpdateExternalResearcherPublishedDto": {
        "type": "object",
        "properties": {
          "researcherName": {
            "type": "string",
            "description": "To be used when sending messages or emails to the respondent. Full name not required."
          },
          "bookingUrl": {
            "type": "string",
            "description": "Link to book a meeting with the researcher."
          }
        }
      },
      "UpdatePublishedProjectDto": {
        "type": "object",
        "properties": {
          "publicTitle": {
            "type": "string",
            "description": "Project Title.\nThis is visible to Respondents, do not mention any incentive amount as you may change it during your project."
          },
          "publicInternalName": {
            "type": "string",
            "description": "Internal Project Name.\nThis is visible only to your organization.\nCharacter Limit: Min 3 and Max 50."
          },
          "publicDescription": {
            "type": "string",
            "description": "Project Details.\nThis is visible to Respondents.\nCharacter Limit: Max 800."
          },
          "participantTimeRequiredMinutes": { "type": "number" },
          "incentiveAmount": {
            "type": "number",
            "description": "Dollars ranging: Min 5 and Max 1000.\nPro tip: Set your incentive at or above $2 per minute (B2C) or $3 per minute (B2B) to attract quality participants faster.\nMore tips to pick the right incentive: https://help.respondent.io/en/articles/5471087-what-is-the-best-incentive-for-my-research-project"
          },
          "ndaDetails": { "$ref": "#/components/schemas/NdaDetails" },
          "ndaLink": {
            "type": "string",
            "nullable": true,
            "description": "Use ndaDetails.ndaLink.",
            "deprecated": true
          },
          "externalResearcher": {
            "$ref": "#/components/schemas/UpdateExternalResearcherPublishedDto"
          }
        }
      },
      "ProjectStatus": {
        "type": "string",
        "enum": ["DRAFT", "PAID", "ARCHIVED", "CLOSED"]
      },
      "ProjectRecruitingStatus": {
        "type": "string",
        "enum": ["RECRUITING", "RECRUITED", "PAUSED"]
      },
      "AudienceTypes": {
        "type": "string",
        "description": "Audience type to be targeted for this project. Example values: Industry professionals (B2B) or General Population (B2C)",
        "enum": ["b2b", "b2c"]
      },
      "Location": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "googleId": { "type": "string" },
          "region": { "type": "string" },
          "city": { "type": "string" },
          "state": { "type": "string" },
          "country": { "$ref": "#/components/schemas/ProjectCountryCode" },
          "zipcode": { "type": "string" },
          "address1": { "type": "string" },
          "formattedAddress": { "type": "string" },
          "location": { "$ref": "#/components/schemas/LocationCoordinate" }
        },
        "required": ["city", "country", "location"]
      },
      "ProjectCities": {
        "type": "object",
        "properties": {
          "location": { "$ref": "#/components/schemas/Location" }
        },
        "required": ["location"]
      },
      "QuestionType": {
        "type": "string",
        "enum": [
          "radio",
          "multiLineTextbox",
          "checkbox",
          "singleLineTextbox",
          "numericBox",
          "sliderScale"
        ]
      },
      "ScreenerQuestionAnswer": {
        "type": "object",
        "properties": {
          "createdAt": { "type": "string" },
          "updatedAt": { "type": "string" },
          "uid": { "type": "string" },
          "text": {
            "type": "string",
            "description": "Required  unless `isOther`, then text will be set to 'Other'"
          },
          "answerValue": {
            "type": "number",
            "description": "CHECKBOX: {\n        id: 3,\n        answerValues: [\n          { id: 1, text: 'May Select' },\n          { id: 2, text: 'Must Select' },\n          { id: 3, text: 'Disqualify' },\n        ],\n      },\n       RADIO: {\n        id: 1,\n        answerValues: [\n          { id: 1, text: 'Qualify' },\n          { id: 2, text: 'Disqualify' },\n        ],\n      },"
          },
          "goToQuestionUid": {
            "type": "string",
            "description": "Skip logic for radio questions. Uid of question to skip to."
          },
          "isOther": {
            "type": "boolean",
            "description": "Is 'Other' answer with comment field"
          },
          "id": { "type": "string" }
        },
        "required": ["createdAt", "uid", "answerValue", "id"]
      },
      "SkipLogicTypeId": {
        "type": "number",
        "description": "[\n\n SELECTED: 1\n\n NOT_SELECTED: 2\n\n]",
        "enum": [1, 2]
      },
      "SkipLogicType": {
        "type": "string",
        "enum": ["Selected", "Not Selected"]
      },
      "ScreenerQuestionSkipLogicType": {
        "type": "object",
        "properties": {
          "id": { "$ref": "#/components/schemas/SkipLogicTypeId" },
          "text": { "$ref": "#/components/schemas/SkipLogicType" }
        },
        "required": ["id", "text"]
      },
      "SkipLogicMultipleAnswer": {
        "type": "object",
        "properties": {
          "answer": { "type": "string" },
          "logicType": {
            "$ref": "#/components/schemas/ScreenerQuestionSkipLogicType"
          }
        },
        "required": ["answer", "logicType"]
      },
      "MultipleAnswersBoolTypeId": {
        "type": "number",
        "description": "[\n\n AND: 1\n\n OR: 2\n\n]",
        "enum": [1, 2]
      },
      "MultipleAnswersBoolType": { "type": "string", "enum": ["AND", "OR"] },
      "SkipLogicMultipleAnswersBoolType": {
        "type": "object",
        "properties": {
          "id": { "$ref": "#/components/schemas/MultipleAnswersBoolTypeId" },
          "text": { "$ref": "#/components/schemas/MultipleAnswersBoolType" }
        },
        "required": ["id", "text"]
      },
      "ScreenerQuestionSkipLogic": {
        "type": "object",
        "properties": {
          "answerUid": { "type": "string" },
          "goToQuestionUid": { "type": "string" },
          "skipLogicType": {
            "$ref": "#/components/schemas/ScreenerQuestionSkipLogicType"
          },
          "multipleAnswers": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SkipLogicMultipleAnswer" }
          },
          "multipleAnswersBoolType": {
            "$ref": "#/components/schemas/SkipLogicMultipleAnswersBoolType"
          }
        },
        "required": ["answerUid"]
      },
      "ScreenerQuestion": {
        "type": "object",
        "properties": {
          "createdAt": { "type": "string" },
          "updatedAt": { "type": "string" },
          "questionType": { "$ref": "#/components/schemas/QuestionType" },
          "uid": { "type": "string" },
          "text": { "type": "string" },
          "answers": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ScreenerQuestionAnswer" }
          },
          "isRequired": { "type": "boolean" },
          "skipLogic": { "type": "boolean" },
          "includeOtherOption": { "type": "boolean" },
          "isEnd": { "type": "boolean" },
          "logic": { "$ref": "#/components/schemas/ScreenerQuestionSkipLogic" },
          "minValue": { "type": "number" },
          "maxValue": { "type": "number" },
          "step": { "type": "number" },
          "order": { "type": "number" },
          "warnings": { "type": "array", "items": { "type": "string" } },
          "id": { "type": "string" }
        },
        "required": ["createdAt", "text", "minValue", "maxValue", "step", "id"]
      },
      "ProjectClosedDetails": {
        "type": "object",
        "properties": {
          "closed": { "type": "boolean" },
          "closedMessage": { "type": "string" },
          "closedOnDate": { "format": "date-time", "type": "string" },
          "closedByUserId": { "type": "string" }
        }
      },
      "PastParticipation": {
        "type": "object",
        "properties": {
          "hasNeverParticipated": {
            "type": "boolean",
            "description": "If true &rarr; only include participants who have never participated in a project with the researcher.\nIf false &rarr; only include participants who have not participated in a project with the researcher in the past `months` months."
          },
          "since": {
            "format": "date-time",
            "type": "string",
            "description": "It's autocalculated based on the `hasNeverParticipated` / `months` entered and displays in the API response"
          },
          "months": { "$ref": "#/components/schemas/PastParticipationMonths" }
        },
        "required": ["hasNeverParticipated"]
      },
      "KeyQualifier": {
        "type": "string",
        "description": "Converts signals into required match filters. [Details here](https://developers.respondent.io/docs/targeting-audiences-effectively).",
        "enum": [
          "targetHouseholdIncome",
          "targetProfessionalIndustries",
          "targetCompanySize",
          "targetProjectTopics",
          "targetAudienceSkills"
        ]
      },
      "SimpleIndustry": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "ObjectId" },
          "name": { "type": "string" }
        },
        "required": ["id", "name"]
      },
      "Skill": {
        "type": "object",
        "properties": {
          "createdAt": { "type": "string" },
          "updatedAt": { "type": "string" },
          "name": { "type": "string" },
          "slug": { "type": "string" },
          "validated": { "type": "boolean", "default": false },
          "type": { "type": "string", "default": "skill" },
          "count": { "type": "number", "default": 0 },
          "id": { "type": "string" }
        },
        "required": ["createdAt", "name", "slug", "validated", "type", "id"]
      },
      "Project": {
        "type": "object",
        "properties": {
          "createdAt": { "type": "string" },
          "updatedAt": { "type": "string" },
          "publicTitle": {
            "type": "string",
            "description": "Project Title.\nThis is visible to Respondents, do not mention any incentive amount as you may change it during your project."
          },
          "publicInternalName": {
            "type": "string",
            "description": "Internal Project Name.\nThis is visible only to your organization.\nCharacter Limit: Min 3 and Max 50."
          },
          "publicDescription": {
            "type": "string",
            "description": "Project Details.\nThis is visible to Respondents.\nCharacter Limit: Max 800."
          },
          "organizationId": { "type": "string", "format": "ObjectId" },
          "teamId": { "type": "string", "format": "ObjectId" },
          "projectStatus": { "$ref": "#/components/schemas/ProjectStatus" },
          "projectRecruitingStatus": {
            "$ref": "#/components/schemas/ProjectRecruitingStatus"
          },
          "targetMarketType": { "$ref": "#/components/schemas/AudienceTypes" },
          "typeOfResearch": { "$ref": "#/components/schemas/ResearchTypes" },
          "targetResearchMethodology": {
            "$ref": "#/components/schemas/KindOfResearch"
          },
          "unmoderatedStudyOrSurvey": {
            "description": "For Unmoderated Studies and Surveys only.",
            "allOf": [
              { "$ref": "#/components/schemas/UnmoderatedStudyOrSurvey" }
            ]
          },
          "participantTimeRequiredMinutes": { "type": "number" },
          "incentiveAmount": {
            "type": "number",
            "description": "Dollars ranging: Min 5 and Max 1000.\nPro tip: Set your incentive at or above $2 per minute (B2C) or $3 per minute (B2B) to attract quality participants faster.\nMore tips to pick the right incentive: https://help.respondent.io/en/articles/5471087-what-is-the-best-incentive-for-my-research-project"
          },
          "targetNumberOfParticipants": {
            "type": "number",
            "description": "Number of Participants\nWe will recruit up to 3 times your target number of qualified participants.\nNumber Limit: Min 1 and Max 500."
          },
          "targetCountry": {
            "$ref": "#/components/schemas/ProjectCountryCode"
          },
          "targetCountries": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ProjectCountryCode" }
          },
          "targetCities": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ProjectCities" }
          },
          "targetJobFunctions": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/JobFunction" }
          },
          "targetCompanySize": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CompanySize" }
          },
          "targetLocationRespondentInPerson": {
            "description": "Required for In-Person projects only.\nPlease provide the full address (including city & state if applicable) where the project will be conducted.",
            "allOf": [
              { "$ref": "#/components/schemas/ProjectLocationInPerson" }
            ]
          },
          "targetHouseholdIncome": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/HouseholdIncome" }
          },
          "targetGenders": { "$ref": "#/components/schemas/Gender" },
          "targetEducation": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/EducationLevel" }
          },
          "targetEthnicities": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Ethnicities" }
          },
          "targetAgeGroups": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/AgeGroup" }
          },
          "screenerQuestions": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ScreenerQuestion" }
          },
          "inviteSurveyLink": { "type": "string" },
          "closedDetails": {
            "$ref": "#/components/schemas/ProjectClosedDetails"
          },
          "closed": {
            "type": "boolean",
            "description": "Use projectStatus: 'CLOSED'",
            "deprecated": true
          },
          "closedMessage": {
            "type": "string",
            "description": "Use closedDetails.closedMessage.",
            "deprecated": true
          },
          "closedOnDate": {
            "format": "date-time",
            "type": "string",
            "description": "Use closedDetails.closedOnDate.",
            "deprecated": true
          },
          "closedByUserId": {
            "type": "string",
            "description": "Use closedDetails.closedByUserId.",
            "deprecated": true
          },
          "ndaDetails": { "$ref": "#/components/schemas/NdaDetails" },
          "ndaType": { "$ref": "#/components/schemas/NdaTypeDeprecated" },
          "ndaFileUrl": {
            "type": "string",
            "nullable": true,
            "description": "Use ndaDetails.ndaFileUrl",
            "deprecated": true
          },
          "ndaLink": {
            "type": "string",
            "nullable": true,
            "description": "Use ndaDetails.ndaLink.",
            "deprecated": true
          },
          "filterPastParticipation": {
            "description": "- If researcher wants to filter out participants who have participated in past projects.\n- Past Participation logic is used at Researcher level based on external reseacher id.\n- The participant must have been paid for a project to count as a past participant.\n- Past participation filtering is available within 4 hours of a payout being made, NOT immediately after payment.",
            "allOf": [{ "$ref": "#/components/schemas/PastParticipation" }]
          },
          "externalResearcher": {
            "description": "Required for all projects to identify your researcher with Respondent to differentiate from other researchers recruiting through your platform.",
            "allOf": [{ "$ref": "#/components/schemas/ExternalResearcher" }]
          },
          "seniority": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SeniorityLevel" }
          },
          "publishedAt": { "format": "date-time", "type": "string" },
          "automations": {
            "description": "- Autopay is used to automatically pay participants after they complete a project.\n  - If not provided, defaults to `true`.\n- Autoinvite is used to automatically invite participants to a project if they qualify after completing the screener.\n  - Only available when `targetResearchMethodology` is one of: [`unmoderatedStudy`, `survey`].\n  - If not provided, defaults to `false`.",
            "allOf": [{ "$ref": "#/components/schemas/Automation" }]
          },
          "keyQualifiers": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/KeyQualifier" }
          },
          "completionUrl": {
            "type": "string",
            "nullable": true,
            "description": "Researchers can provide participants with this link at the conclusion of their survey or study, enabling them to self-report task completion.\nAvailable for projects where the targetResearchMethodology is either unmoderatedStudy or survey."
          },
          "targetProfessionalIndustries": {
            "description": "Required for Industry professionals (B2B) projects\nArray: Min 1 and Max 5.",
            "type": "array",
            "items": { "$ref": "#/components/schemas/SimpleIndustry" }
          },
          "targetJobTitles": {
            "description": "Available for Industry professionals (B2B) projects.\nArray: Max 10.",
            "type": "array",
            "items": { "$ref": "#/components/schemas/SimpleJobTitle" }
          },
          "targetProjectTopics": {
            "description": "Required for General Population (B2C) projects only\nTagging your projects with topics will better help match your general population project with participants that have indicated interest in these topics.\nArray: Min 1 and Max 2.",
            "type": "array",
            "items": { "$ref": "#/components/schemas/SimpleTopic" }
          },
          "targetAudienceSkills": {
            "description": "Array: Min 0 and Max 25.\nSelect skills, knowledge areas, tools and/or certifications you would like to target.",
            "type": "array",
            "items": { "$ref": "#/components/schemas/Skill" }
          },
          "id": { "type": "string" }
        },
        "required": [
          "createdAt",
          "publicTitle",
          "publicInternalName",
          "projectStatus",
          "projectRecruitingStatus",
          "targetMarketType",
          "typeOfResearch",
          "targetResearchMethodology",
          "participantTimeRequiredMinutes",
          "incentiveAmount",
          "targetNumberOfParticipants",
          "externalResearcher",
          "id"
        ]
      },
      "PublicProjectsPaginatedDto": {
        "type": "object",
        "properties": {
          "totalResults": {
            "type": "number",
            "description": "The total number of results possible, which is only provided in the response when `includeCount` is passed as `true` within a request."
          },
          "page": { "type": "number", "default": 1 },
          "pageSize": { "type": "number", "default": 50 },
          "results": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Project" }
          }
        },
        "required": ["page", "pageSize", "results"]
      },
      "PauseProjectDto": {
        "type": "object",
        "properties": { "paused": { "type": "boolean" } },
        "required": ["paused"]
      },
      "CloseProjectDto": {
        "type": "object",
        "properties": { "message": { "type": "string" } }
      },
      "AudienceSizeEstimate": {
        "type": "object",
        "properties": {
          "exactAudienceMatch": {
            "type": "number",
            "description": "Active users over previous 90 days that are an exact match for the audience defined in the project."
          },
          "eligibleAudience": {
            "type": "number",
            "description": "Active users over the previous 90 days that receive a high similarity score for the audience defined in\nthe project and are able to apply, but may be less than 100% qualified."
          }
        },
        "required": ["exactAudienceMatch", "eligibleAudience"]
      },
      "RadioQuestionType": {
        "type": "string",
        "default": "radio",
        "enum": ["radio"]
      },
      "RadioAnswerValue": {
        "type": "number",
        "description": "[\n\n QUALIFY: 1\n\n DISQUALIFY: 2\n\n]",
        "enum": [1, 2]
      },
      "CreateRadioScreenerQuestionAnswerDto": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "Required  unless `isOther`, then text will be set to 'Other'"
          },
          "goToQuestionUid": {
            "type": "string",
            "description": "Skip logic for radio questions. Uid of question to skip to."
          },
          "isOther": {
            "type": "boolean",
            "description": "Is 'Other' answer with comment field"
          },
          "answerValue": { "$ref": "#/components/schemas/RadioAnswerValue" }
        },
        "required": ["answerValue"]
      },
      "CreateRadioScreenerQuestionDto": {
        "type": "object",
        "properties": {
          "text": { "type": "string" },
          "isRequired": { "type": "boolean" },
          "skipLogic": { "type": "boolean" },
          "includeOtherOption": { "type": "boolean" },
          "questionType": { "$ref": "#/components/schemas/RadioQuestionType" },
          "answers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateRadioScreenerQuestionAnswerDto"
            }
          }
        },
        "required": ["text", "questionType", "answers"]
      },
      "CheckboxQuestionType": {
        "type": "string",
        "default": "checkbox",
        "enum": ["checkbox"]
      },
      "CheckboxAnswerValue": {
        "type": "number",
        "description": "[\n\n MAY_SELECT: 1\n\n MUST_SELECT: 2\n\n DISQUALIFY: 3\n\n]",
        "enum": [1, 2, 3]
      },
      "CreateCheckboxScreenerQuestionAnswerDto": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "Required  unless `isOther`, then text will be set to 'Other'"
          },
          "isOther": {
            "type": "boolean",
            "description": "Is 'Other' answer with comment field"
          },
          "answerValue": { "$ref": "#/components/schemas/CheckboxAnswerValue" }
        },
        "required": ["answerValue"]
      },
      "CreateCheckboxScreenerQuestionDto": {
        "type": "object",
        "properties": {
          "text": { "type": "string" },
          "isRequired": { "type": "boolean" },
          "skipLogic": { "type": "boolean" },
          "includeOtherOption": { "type": "boolean" },
          "logic": { "$ref": "#/components/schemas/ScreenerQuestionSkipLogic" },
          "questionType": {
            "$ref": "#/components/schemas/CheckboxQuestionType"
          },
          "answers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateCheckboxScreenerQuestionAnswerDto"
            }
          }
        },
        "required": ["text", "questionType", "answers"]
      },
      "TextboxQuestionType": {
        "type": "string",
        "default": "singleLineTextbox",
        "enum": ["singleLineTextbox", "multiLineTextbox", "numericBox"]
      },
      "CreateTextboxScreenerQuestionDto": {
        "type": "object",
        "properties": {
          "text": { "type": "string" },
          "isRequired": { "type": "boolean" },
          "questionType": { "$ref": "#/components/schemas/TextboxQuestionType" }
        },
        "required": ["text", "questionType"]
      },
      "SliderScaleQuestionType": {
        "type": "string",
        "default": "sliderScale",
        "enum": ["sliderScale"]
      },
      "CreateSliderScaleScreenerQuestionDto": {
        "type": "object",
        "properties": {
          "text": { "type": "string" },
          "isRequired": { "type": "boolean" },
          "questionType": {
            "$ref": "#/components/schemas/SliderScaleQuestionType"
          },
          "minValue": { "type": "number", "default": 0 },
          "maxValue": { "type": "number", "default": 100 },
          "step": { "type": "number", "default": 10 }
        },
        "required": ["text", "questionType"]
      },
      "UpdateRadioScreenerQuestionDto": {
        "type": "object",
        "properties": {
          "text": { "type": "string" },
          "isRequired": { "type": "boolean" },
          "skipLogic": { "type": "boolean" },
          "includeOtherOption": { "type": "boolean" },
          "questionType": { "$ref": "#/components/schemas/RadioQuestionType" },
          "answers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateRadioScreenerQuestionAnswerDto"
            }
          }
        }
      },
      "UpdateCheckboxScreenerQuestionDto": {
        "type": "object",
        "properties": {
          "text": { "type": "string" },
          "isRequired": { "type": "boolean" },
          "skipLogic": { "type": "boolean" },
          "includeOtherOption": { "type": "boolean" },
          "logic": { "$ref": "#/components/schemas/ScreenerQuestionSkipLogic" },
          "questionType": {
            "$ref": "#/components/schemas/CheckboxQuestionType"
          },
          "answers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateCheckboxScreenerQuestionAnswerDto"
            }
          }
        }
      },
      "UpdateTextboxScreenerQuestionDto": {
        "type": "object",
        "properties": {
          "text": { "type": "string" },
          "isRequired": { "type": "boolean" },
          "questionType": { "$ref": "#/components/schemas/TextboxQuestionType" }
        }
      },
      "UpdateSliderScaleScreenerQuestionDto": {
        "type": "object",
        "properties": {
          "text": { "type": "string" },
          "isRequired": { "type": "boolean" },
          "questionType": {
            "$ref": "#/components/schemas/SliderScaleQuestionType"
          },
          "minValue": { "type": "number", "default": 0 },
          "maxValue": { "type": "number", "default": 100 },
          "step": { "type": "number", "default": 10 }
        }
      },
      "UpsertRadioScreenerQuestionAnswerDto": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "Required  unless `isOther`, then text will be set to 'Other'"
          },
          "goToQuestionUid": {
            "type": "string",
            "description": "Skip logic for radio questions. Uid of question to skip to."
          },
          "isOther": {
            "type": "boolean",
            "description": "Is 'Other' answer with comment field"
          },
          "answerValue": { "$ref": "#/components/schemas/RadioAnswerValue" },
          "id": { "type": "string", "format": "ObjectId" },
          "uid": { "type": "string" },
          "createdAt": { "format": "date-time", "type": "string" }
        },
        "required": ["answerValue"]
      },
      "UpsertRadioScreenerQuestionDto": {
        "type": "object",
        "properties": {
          "text": { "type": "string" },
          "isRequired": { "type": "boolean" },
          "skipLogic": { "type": "boolean" },
          "includeOtherOption": { "type": "boolean" },
          "questionType": { "$ref": "#/components/schemas/RadioQuestionType" },
          "id": { "type": "string", "format": "ObjectId" },
          "uid": { "type": "string" },
          "answers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpsertRadioScreenerQuestionAnswerDto"
            }
          },
          "isEnd": { "type": "boolean", "default": false },
          "warnings": { "type": "array", "items": { "type": "string" } },
          "createdAt": { "format": "date-time", "type": "string" }
        },
        "required": ["text", "questionType", "answers"]
      },
      "UpsertCheckboxScreenerQuestionAnswerDto": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "Required  unless `isOther`, then text will be set to 'Other'"
          },
          "isOther": {
            "type": "boolean",
            "description": "Is 'Other' answer with comment field"
          },
          "answerValue": { "$ref": "#/components/schemas/CheckboxAnswerValue" },
          "id": { "type": "string", "format": "ObjectId" },
          "uid": { "type": "string" },
          "createdAt": { "format": "date-time", "type": "string" }
        },
        "required": ["answerValue"]
      },
      "UpsertCheckboxScreenerQuestionDto": {
        "type": "object",
        "properties": {
          "text": { "type": "string" },
          "isRequired": { "type": "boolean" },
          "skipLogic": { "type": "boolean" },
          "includeOtherOption": { "type": "boolean" },
          "logic": { "$ref": "#/components/schemas/ScreenerQuestionSkipLogic" },
          "questionType": {
            "$ref": "#/components/schemas/CheckboxQuestionType"
          },
          "id": { "type": "string", "format": "ObjectId" },
          "uid": { "type": "string" },
          "answers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpsertCheckboxScreenerQuestionAnswerDto"
            }
          },
          "isEnd": { "type": "boolean", "default": false },
          "warnings": { "type": "array", "items": { "type": "string" } },
          "createdAt": { "format": "date-time", "type": "string" }
        },
        "required": ["text", "questionType", "answers"]
      },
      "UpsertTextboxScreenerQuestionDto": {
        "type": "object",
        "properties": {
          "text": { "type": "string" },
          "isRequired": { "type": "boolean" },
          "questionType": {
            "$ref": "#/components/schemas/TextboxQuestionType"
          },
          "id": { "type": "string", "format": "ObjectId" },
          "uid": { "type": "string" },
          "isEnd": { "type": "boolean", "default": false },
          "warnings": { "type": "array", "items": { "type": "string" } },
          "createdAt": { "format": "date-time", "type": "string" }
        },
        "required": ["text", "questionType"]
      },
      "UpsertSliderScaleScreenerQuestionDto": {
        "type": "object",
        "properties": {
          "text": { "type": "string" },
          "isRequired": { "type": "boolean" },
          "questionType": {
            "$ref": "#/components/schemas/SliderScaleQuestionType"
          },
          "minValue": { "type": "number", "default": 0 },
          "maxValue": { "type": "number", "default": 100 },
          "step": { "type": "number", "default": 10 },
          "id": { "type": "string", "format": "ObjectId" },
          "uid": { "type": "string" },
          "isEnd": { "type": "boolean", "default": false },
          "warnings": { "type": "array", "items": { "type": "string" } },
          "createdAt": { "format": "date-time", "type": "string" }
        },
        "required": ["text", "questionType"]
      },
      "ScreenerResponseStatus": {
        "type": "string",
        "enum": [
          "PENDING",
          "INVITED",
          "SCHEDULED",
          "ATTENDED",
          "NOSHOW",
          "INVALIDRESPONSE",
          "REJECTEDQUALITY",
          "PAID",
          "CANCELLED"
        ]
      },
      "ScreenerResponseVisibilityStatus": {
        "type": "string",
        "default": "VISIBLE",
        "enum": ["DISMISSED", "VISIBLE", "ONHOLD"]
      },
      "GetScreenerResponsesPaginatedDto": {
        "type": "object",
        "properties": {
          "page": {
            "type": "number",
            "description": "Specifies which page of results to return",
            "default": 1
          },
          "pageSize": {
            "type": "number",
            "description": "Number of records to return per page",
            "default": 50
          },
          "includeCount": {
            "type": "boolean",
            "description": "If true, includes the total count of records",
            "default": false
          },
          "hidden": { "type": "boolean", "default": false },
          "status": { "$ref": "#/components/schemas/ScreenerResponseStatus" },
          "statuses": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ScreenerResponseStatus" }
          },
          "qualified": { "type": "boolean" },
          "favorite": { "type": "boolean" },
          "visibilityStatus": {
            "$ref": "#/components/schemas/ScreenerResponseVisibilityStatus"
          }
        }
      },
      "ScreenerQuestionAnswerValue": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "ObjectId" },
          "uid": { "type": "string" },
          "text": { "type": "string" },
          "answerValue": { "type": "number" },
          "goToQuestionUid": { "type": "string", "nullable": true },
          "isOther": { "type": "boolean" },
          "other": { "type": "string" }
        },
        "required": ["id", "uid", "text", "answerValue"]
      },
      "ScreenerResponseAnswer": {
        "type": "object",
        "properties": {
          "questionId": { "type": "string" },
          "questionText": { "type": "string" },
          "order": { "type": "number" },
          "type": { "type": "string" },
          "questionType": { "$ref": "#/components/schemas/QuestionType" },
          "answers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScreenerQuestionAnswerValue"
            }
          },
          "qualify": { "type": "boolean" }
        },
        "required": [
          "questionId",
          "questionText",
          "type",
          "questionType",
          "answers",
          "qualify"
        ]
      },
      "ScreenerResponseProject": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "incentive": { "type": "number" },
          "id": { "type": "string" },
          "organizationId": { "type": "string" },
          "teamId": { "type": "string" }
        },
        "required": ["name", "incentive", "id", "organizationId", "teamId"]
      },
      "ScreenerResponseProfile": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "ObjectId" },
          "userId": { "type": "string", "format": "ObjectId" },
          "firstName": { "type": "string" },
          "lastName": { "type": "string" },
          "picture": { "type": "string", "nullable": true },
          "skills": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/SimpleSkill" }
          }
        },
        "required": ["id", "userId", "firstName", "lastName", "skills"]
      },
      "ScreenerResponseMatching": {
        "type": "object",
        "properties": {
          "isGenderMatch": { "type": "boolean" },
          "isAgeMatch": { "type": "boolean" },
          "isEthnicityMatch": { "type": "boolean" },
          "isEducationMatch": { "type": "boolean" },
          "questionsQualified": { "type": "boolean" },
          "isLocationMatch": { "type": "boolean" },
          "isIndustryMatch": { "type": "boolean" },
          "isJobTitleMatch": { "type": "boolean" },
          "isHouseholdIncomeMatch": { "type": "boolean" },
          "isCompanySizeMatch": { "type": "boolean" },
          "isTopicsMatch": { "type": "boolean" }
        },
        "required": [
          "isGenderMatch",
          "isAgeMatch",
          "isEthnicityMatch",
          "isEducationMatch",
          "questionsQualified",
          "isLocationMatch",
          "isIndustryMatch",
          "isJobTitleMatch",
          "isHouseholdIncomeMatch",
          "isCompanySizeMatch"
        ]
      },
      "ExternalProject": {
        "type": "object",
        "properties": {
          "researcherId": { "type": "string" },
          "bookingUrl": { "type": "string" },
          "meetingCancelLink": {
            "type": "string",
            "description": "Link to cancel a meeting. If not set, bookingLink will be used."
          },
          "bookedDate": { "format": "date-time", "type": "string" },
          "timezone": {
            "type": "string",
            "description": "IANA timezone. Example: 'America/New_York'"
          }
        },
        "required": ["researcherId"]
      },
      "InvitationEvent": {
        "type": "object",
        "properties": { "uid": { "type": "string" } },
        "required": ["uid"]
      },
      "InvitationVideoProvider": {
        "type": "object",
        "properties": {
          "loginProviderId": { "type": "string" },
          "providerKey": { "type": "string", "enum": ["zoom"] },
          "userId": { "type": "string" }
        },
        "required": ["loginProviderId", "providerKey", "userId"]
      },
      "ScreenerResponseInvitation": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "ObjectId" },
          "remoteCommunicationDetails": { "type": "string" },
          "event": { "$ref": "#/components/schemas/InvitationEvent" },
          "message": {
            "type": "string",
            "description": "This will override the special instructions from the project.",
            "default": null
          },
          "videoProvider": {
            "$ref": "#/components/schemas/InvitationVideoProvider"
          }
        },
        "required": ["id"]
      },
      "Actor": {
        "type": "string",
        "enum": ["researcher", "respondent", "admin"]
      },
      "ParticipantCancellationReason": {
        "type": "string",
        "enum": ["time", "final"]
      },
      "Rejection": {
        "type": "object",
        "properties": {
          "message": { "type": "string" },
          "rejectedAt": { "format": "date-time", "type": "string" }
        },
        "required": ["message", "rejectedAt"]
      },
      "ScreenerResponseVisibility": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/ScreenerResponseVisibilityStatus"
          }
        },
        "required": ["status"]
      },
      "ScreenerResponseTask": {
        "type": "object",
        "properties": {
          "completedAt": {
            "type": "string",
            "description": "Timestamp when the task was completed.\nThis field is automatically set when participants access the project's completionUrl."
          }
        }
      },
      "ScreenerResponse": {
        "type": "object",
        "properties": {
          "qualified": { "type": "boolean" },
          "qualifiedPendingIdVerification": {
            "type": "boolean",
            "description": "- This property is set to `true` (with `qualified` set to `false`) if the participant has qualified based on their responses to the screener, but is in the process of verifying their identity.\n- Once the participant has completed ID verification, `qualifiedPendingIdVerification` will be set to false.\n  - If the verification was successful, `qualified` will be set to `true`.\n  - If the verification failed, `qualified` will remain set to `false` unless they were manually qualified through the qualification endpoint\n(`PATCH /projects/{projectId}/screener-responses/{screenerResponseId}/qualify`)."
          },
          "percentage": { "type": "number" },
          "status": { "$ref": "#/components/schemas/ScreenerResponseStatus" },
          "favorite": { "type": "boolean" },
          "hidden": { "type": "boolean" },
          "responses": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ScreenerResponseAnswer" }
          },
          "totalTime": { "type": "number" },
          "isNew": { "type": "boolean" },
          "inviteSentAt": { "format": "date-time", "type": "string" },
          "scheduledAt": { "format": "date-time", "type": "string" },
          "statusUpdatedAt": { "format": "date-time", "type": "string" },
          "ndaUrl": { "type": "string" },
          "ndaAgree": { "type": "boolean" },
          "project": { "$ref": "#/components/schemas/ScreenerResponseProject" },
          "profile": { "$ref": "#/components/schemas/ScreenerResponseProfile" },
          "matching": {
            "$ref": "#/components/schemas/ScreenerResponseMatching"
          },
          "externalProject": { "$ref": "#/components/schemas/ExternalProject" },
          "invitation": {
            "$ref": "#/components/schemas/ScreenerResponseInvitation"
          },
          "actor": { "$ref": "#/components/schemas/Actor" },
          "reason": {
            "$ref": "#/components/schemas/ParticipantCancellationReason"
          },
          "shortNoticeCancel": { "type": "boolean" },
          "message": { "type": "string" },
          "rejection": { "$ref": "#/components/schemas/Rejection" },
          "visibility": {
            "description": "The visibility status of the screener response.\nIf a screener response is visible, it can be interacted with (invited etc).\nIf a screener response is not visible, it cannot be interacted with.\nA screener may be hidden for various reasons, and a screener can change from visible\nto not visible at any time if a participant or screener is found to be untrustworthy.\nThere is a webhook that will notify the client when a screener response changes visibility.",
            "allOf": [
              { "$ref": "#/components/schemas/ScreenerResponseVisibility" }
            ]
          },
          "createdAt": { "format": "date-time", "type": "string" },
          "task": { "$ref": "#/components/schemas/ScreenerResponseTask" },
          "id": { "type": "string" },
          "projectId": { "type": "string" },
          "userId": { "type": "string" }
        },
        "required": [
          "qualified",
          "percentage",
          "status",
          "responses",
          "totalTime",
          "matching",
          "visibility",
          "id",
          "projectId",
          "userId"
        ]
      },
      "ScreenerResponsesPaginatedDto": {
        "type": "object",
        "properties": {
          "totalResults": {
            "type": "number",
            "description": "The total number of results possible, which is only provided in the response when `includeCount` is passed as `true` within a request."
          },
          "page": { "type": "number", "default": 1 },
          "pageSize": { "type": "number", "default": 50 },
          "results": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ScreenerResponse" }
          }
        },
        "required": ["page", "pageSize"]
      },
      "PayoutSummaryDto": {
        "type": "object",
        "properties": {
          "incentive": { "type": "number", "description": "In cents. USD." },
          "tip": { "type": "number", "description": "In cents. USD." },
          "totalIncentive": {
            "type": "number",
            "description": "Tip + Incentive"
          },
          "createdAt": { "type": "string" }
        },
        "required": ["incentive", "tip", "totalIncentive", "createdAt"]
      },
      "ParticipantPayoutSummaryDto": {
        "type": "object",
        "properties": {
          "userId": { "type": "string" },
          "profileId": { "type": "string" },
          "screenerResponseId": { "type": "string" },
          "numberOfPayouts": { "type": "number" },
          "payouts": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/PayoutSummaryDto" }
          }
        },
        "required": [
          "userId",
          "profileId",
          "screenerResponseId",
          "numberOfPayouts",
          "payouts"
        ]
      },
      "InviteScreenerResponseDto": {
        "type": "object",
        "properties": {
          "remoteCommunicationDetails": {
            "type": "string",
            "description": "Use `meetingLink` instead. Note: `meetingLink` will not be used as the bookingUrl on the screener response.",
            "deprecated": true
          },
          "meetingLink": {
            "type": "string",
            "description": "If the project is an Unmoderated study, this URL will be included in the particiapnt's\ninvitation email, allowing them to access the study.\nThis will override the remoteCommunicationDetails defined in the project.\nIf a project is remote, this should be the link to the research study.\nNote: It will NOT be used as the bookingUrl on the screener"
          },
          "bookingLink": {
            "type": "string",
            "description": "If the project is a Moderated study, this URL will be included in the participant's invitation email, allowing them to schedule their research session.\nWill be used to write bookingUrl on screener response. Must pass `meetingLink` as well."
          },
          "message": {
            "type": "string",
            "description": "Will be sent in the invitation to the participant.\nThis will override the special instructions defined in the project."
          }
        }
      },
      "ScheduleExternalScreenerResponseDto": {
        "type": "object",
        "properties": {
          "bookingUrl": {
            "type": "string",
            "description": "Deprecated: Use `bookingLink` instead to allow for a separation between the booking link and the meeting link.\nBookingUrl is optional and can be used if researcher wants to update the booking url during schedule.\nThis will also update the invitation remoteCommunicationDetails.",
            "deprecated": true
          },
          "bookingLink": {
            "type": "string",
            "description": "`bookingLink` is optional and can be used if researcher wants to update the bookingUrl during schedule."
          },
          "meetingLink": {
            "type": "string",
            "description": "`meetingLink` is optional and can be used if researcher wants to update the remoteCommunicationDetails that was set during invitation."
          },
          "meetingCancelLink": {
            "type": "string",
            "description": "Link to cancel a meeting. If not set, `bookingLink` (or `bookingUrl`, which is deprecated) will be used if set, otherwise `bookingUrl` from `project.externalResearcer` will be used."
          },
          "timezone": {
            "type": "string",
            "description": "The timezone of the scheduled booking Date.\nMust be a valid IANA timezone.\nFor a list of valid timezones, see: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones"
          },
          "bookedDate": {
            "format": "date-time",
            "type": "string",
            "description": "Note: we expect the date to be in the format of YYYY-MM-DDTHH:MM:SS (ISO 8601), in the timezone specified.\nOffset will be removed from the input date.\nDate will be stored in UTC."
          }
        },
        "required": ["timezone", "bookedDate"]
      },
      "FlagReason": {
        "type": "string",
        "enum": [
          "MISREPRESENTED",
          "INAPPROPRIATE",
          "INVALIDRESPONSE",
          "NOSHOW",
          "OTHER"
        ]
      },
      "ReportScreenerResponseDto": {
        "type": "object",
        "properties": {
          "reasons": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/FlagReason" }
          },
          "flaggedMessage": { "type": "string" },
          "payParticipant": { "type": "boolean" }
        },
        "required": ["reasons", "flaggedMessage"]
      },
      "FavoriteScreenerResponseDto": {
        "type": "object",
        "properties": { "favorite": { "type": "boolean" } },
        "required": ["favorite"]
      },
      "DisqualifyReasonCode": {
        "type": "string",
        "enum": ["MISREPRESENTED", "CONTEXT", "SCREENER", "OTHER"]
      },
      "QualifyScreenerResponseDto": {
        "type": "object",
        "properties": {
          "qualifyStatus": { "type": "boolean" },
          "qualifiedOverriden": { "type": "boolean" },
          "disqualifyReasons": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/DisqualifyReasonCode" }
          },
          "message": { "type": "string" }
        },
        "required": [
          "qualifyStatus",
          "qualifiedOverriden",
          "disqualifyReasons",
          "message"
        ]
      },
      "HideScreenerResponseDto": {
        "type": "object",
        "properties": { "hidden": { "type": "boolean" } },
        "required": ["hidden"]
      },
      "CancelBookingReinviteDto": {
        "type": "object",
        "properties": { "message": { "type": "string" } }
      },
      "ParticipantCancelBookingDto": {
        "type": "object",
        "properties": {
          "reason": {
            "$ref": "#/components/schemas/ParticipantCancellationReason"
          },
          "shortNoticeCancel": { "type": "boolean" },
          "message": { "type": "string" }
        }
      },
      "PayoutParticipantDto": {
        "type": "object",
        "properties": {
          "payoutCount": {
            "type": "number",
            "description": "Number Limit: Min 1 and Max 5"
          },
          "tip": {
            "type": "number",
            "description": "Tip amount for the participant.\nIn cents. USD.\nDollars Limit: Min 0."
          }
        },
        "required": ["payoutCount"]
      },
      "SkillsPaginatedDto": {
        "type": "object",
        "properties": {
          "totalResults": {
            "type": "number",
            "description": "The total number of results possible, which is only provided in the response when `includeCount` is passed as `true` within a request."
          },
          "page": { "type": "number", "default": 1 },
          "pageSize": { "type": "number", "default": 50 },
          "results": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Skill" }
          }
        },
        "required": ["page", "pageSize", "results"]
      },
      "Topic": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "ObjectId" },
          "createdAt": { "format": "date-time", "type": "string" },
          "name": { "type": "string" },
          "customName": { "type": "string" },
          "updatedAt": { "format": "date-time", "type": "string" }
        },
        "required": ["id", "createdAt", "name"]
      },
      "TopicsPaginatedDto": {
        "type": "object",
        "properties": {
          "totalResults": {
            "type": "number",
            "description": "The total number of results possible, which is only provided in the response when `includeCount` is passed as `true` within a request."
          },
          "page": { "type": "number", "default": 1 },
          "pageSize": { "type": "number", "default": 50 },
          "results": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Topic" }
          }
        },
        "required": ["page", "pageSize", "results"]
      },
      "PricingBalanceSummary": {
        "type": "object",
        "properties": {
          "creditBalance": { "type": "number" },
          "incentiveBalance": { "type": "number" }
        },
        "required": ["creditBalance", "incentiveBalance"]
      },
      "ParticipantSource": {
        "type": "string",
        "enum": ["marketplace", "recruited", "invited"]
      },
      "SortBy": {
        "type": "string",
        "default": "mostrecent",
        "enum": ["mostrecent", "leastrecent", "name"]
      },
      "GetTeamRespondentsPaginatedDto": {
        "type": "object",
        "properties": {
          "page": {
            "type": "number",
            "description": "Specifies which page of results to return",
            "default": 1
          },
          "pageSize": {
            "type": "number",
            "description": "Number of records to return per page",
            "default": 50
          },
          "includeCount": {
            "type": "boolean",
            "description": "If true, includes the total count of records",
            "default": false
          },
          "name": { "type": "string" },
          "jobTitle": { "type": "string" },
          "lastPaidAt": { "type": "string" },
          "projectIds": {
            "type": "array",
            "items": { "type": "string", "format": "ObjectId" }
          },
          "source": { "$ref": "#/components/schemas/ParticipantSource" },
          "externalResearcherId": { "type": "string" },
          "externalTeamId": { "type": "string" },
          "externalCompanyId": { "type": "string" },
          "sortBy": { "$ref": "#/components/schemas/SortBy" }
        }
      },
      "TeamRespondent": {
        "type": "object",
        "properties": {
          "profileId": { "type": "string", "format": "ObjectId" },
          "userId": { "type": "string", "format": "ObjectId" },
          "firstName": { "type": "string" },
          "lastInitial": { "type": "string" },
          "jobTitle": { "type": "string" },
          "linkedinUrl": { "type": "string" },
          "skills": {
            "default": [],
            "type": "array",
            "items": { "$ref": "#/components/schemas/SimpleSkill" }
          },
          "company": { "type": "string" },
          "companySize": { "$ref": "#/components/schemas/CompanySize" },
          "location": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ProfileLocation" }
          },
          "gender": { "$ref": "#/components/schemas/Gender" },
          "educationLevel": { "$ref": "#/components/schemas/EducationLevel" },
          "ethnicity": { "$ref": "#/components/schemas/Ethnicities" },
          "householdIncome": { "$ref": "#/components/schemas/HouseholdIncome" },
          "industry": { "type": "array", "items": { "type": "string" } },
          "seniorityLevel": { "$ref": "#/components/schemas/SeniorityLevel" },
          "source": { "$ref": "#/components/schemas/ParticipantSource" },
          "lastPaidAt": { "type": "string" },
          "socialLinks": { "type": "object" }
        },
        "required": [
          "profileId",
          "userId",
          "firstName",
          "lastInitial",
          "skills",
          "companySize",
          "location",
          "gender",
          "educationLevel",
          "ethnicity",
          "householdIncome",
          "industry"
        ]
      },
      "TeamRespondentsPaginatedDto": {
        "type": "object",
        "properties": {
          "totalResults": {
            "type": "number",
            "description": "The total number of results possible, which is only provided in the response when `includeCount` is passed as `true` within a request."
          },
          "page": { "type": "number", "default": 1 },
          "pageSize": { "type": "number", "default": 50 },
          "results": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/TeamRespondent" }
          }
        },
        "required": ["page", "pageSize", "results"]
      },
      "InviteRespondentDto": {
        "type": "object",
        "properties": {
          "profileId": { "type": "string", "format": "ObjectId" },
          "skipScreenerQuestions": { "type": "boolean" }
        },
        "required": ["profileId", "skipScreenerQuestions"]
      },
      "BatchInviteTeamRespondentsDto": {
        "type": "object",
        "properties": {
          "projectId": { "type": "string", "format": "ObjectId" },
          "participants": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/InviteRespondentDto" }
          },
          "message": { "type": "string" }
        },
        "required": ["projectId", "participants", "message"]
      },
      "InvitationProfile": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "ObjectId" },
          "firstName": { "type": "string" },
          "lastName": { "type": "string" }
        },
        "required": ["id", "firstName", "lastName"]
      },
      "InvitationProject": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "ObjectId" },
          "name": { "type": "string" },
          "inviteCode": { "type": "string" },
          "incentive": { "type": "number" }
        },
        "required": ["id", "name", "inviteCode", "incentive"]
      },
      "Invitation": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "ObjectId" },
          "createdAt": { "format": "date-time", "type": "string" },
          "profileId": { "type": "string", "format": "ObjectId" },
          "userId": { "type": "string", "format": "ObjectId" },
          "organizationId": { "type": "string", "format": "ObjectId" },
          "teamId": { "type": "string", "format": "ObjectId" },
          "projectId": { "type": "string", "format": "ObjectId" },
          "senderId": { "type": "string", "format": "ObjectId" },
          "message": { "type": "string" },
          "eventUid": { "type": "string" },
          "remoteCommunicationDetails": { "type": "string" },
          "skipScreenerQuestions": { "type": "boolean" },
          "profile": { "$ref": "#/components/schemas/InvitationProfile" },
          "project": { "$ref": "#/components/schemas/InvitationProject" },
          "updatedAt": { "format": "date-time", "type": "string" }
        },
        "required": [
          "id",
          "createdAt",
          "profileId",
          "userId",
          "organizationId",
          "teamId",
          "projectId",
          "senderId",
          "message",
          "skipScreenerQuestions",
          "profile",
          "project"
        ]
      },
      "BatchInviteTeamRespondentsResponseDto": {
        "type": "object",
        "properties": {
          "invitations": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Invitation" }
          },
          "skipped": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/InviteRespondentDto" }
          }
        },
        "required": ["invitations", "skipped"]
      },
      "CreateWebhookDto": {
        "type": "object",
        "properties": {
          "teamId": { "type": "string", "format": "ObjectId" },
          "url": {
            "type": "string",
            "description": "The URL to send the webhook payload to."
          }
        },
        "required": ["url"]
      },
      "WebhookDto": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "ObjectId" },
          "url": {
            "type": "string",
            "description": "The URL to send the webhook payload to."
          },
          "privateKey": {
            "type": "string",
            "description": "The secret key to be used to sign the webhook payload."
          },
          "teamId": { "type": "string", "format": "ObjectId" },
          "organizationId": { "type": "string", "format": "ObjectId" }
        },
        "required": ["id", "url", "privateKey"]
      },
      "WebhookEventType": {
        "type": "string",
        "description": "The webhook event type to simulate.",
        "enum": [
          "PROJECTS.UPDATED",
          "SCREENER_RESPONSES.CREATED",
          "SCREENER_RESPONSES.UPDATED"
        ]
      },
      "WebhookEventTypesDto": {
        "type": "object",
        "properties": {
          "eventTypes": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/WebhookEventType" }
          }
        },
        "required": ["eventTypes"]
      },
      "WebhookScreenerResponseUpdatedType": {
        "type": "string",
        "description": "The status or rejection of the screener to test. Only used for `SCREENER_RESPONSES.UPDATED` events.",
        "enum": [
          "STATUS.PAID",
          "STATUS.CANCELLED",
          "REJECTED.TRUE",
          "REJECTED.FALSE"
        ]
      },
      "SimulateWebhookDto": {
        "type": "object",
        "properties": {
          "event": { "$ref": "#/components/schemas/WebhookEventType" },
          "screenerResponseUpdatedType": {
            "$ref": "#/components/schemas/WebhookScreenerResponseUpdatedType"
          }
        },
        "required": ["event"]
      }
    }
  },
  "x-readme": { "explorer-enabled": true, "proxy-enabled": true }
}

}